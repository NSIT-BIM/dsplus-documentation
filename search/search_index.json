{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","tags":"dsplus,documentation","text":"DSPLUS Un outil en ligne de commande pour interagir avec DataStage et simplifier la mise en place d'une chaine CI/CD pour DataStage. Fonctionalit\u00e9s Requ\u00eater les objets d'un projet Extraire ou g\u00e9n\u00e9rer les informations d'un objet Export M\u00e9tadonn\u00e9es Capture d'\u00e9cran Code source Checksum Arbre syntaxique Documentation Versionner un objet Synchroniser avec un syst\u00e8me de gestion de r\u00e9visions Packager un ensemble d'objets en un artefact D\u00e9ployer un artefact sur un projet Publier un artefact sur un gestionnaire d'artefacts Contr\u00f4ler le respect de normes de qualit\u00e9s Configurer un projet Syntaxe dsplus commande [options] Les options sont sp\u00e9cifi\u00e9es au format long --option valeur ou court (suivant les options) -o valeur Les options \u00e0 valeurs multiples sont sp\u00e9cifi\u00e9es de la mani\u00e8re suivante: --option valeur1 valeur2 Les syntaxes ci-dessous sont accept\u00e9es: --option=valeur --option valeur1 --option valeur2 Les options aux format court sont combinables -o -x -ox Installation Placer l'ex\u00e9cutable correspondant au syst\u00e8me dans un r\u00e9pertoire faisant partie du PATH. Commandes Les commandes reconnues par d\u00e9fauts sont: projects : lister les projets list : lister les objets d'un projet get : extraire les information d'un objet d'un projet init : extraire les informations de tous les objets d'un projet status : comparer un projet avec un repository local package : packager les objets d'un repository local deploy : d\u00e9ployer un package vers un projet quality : controler le respect de normes de qualit\u00e9 coverage : \u00e9tat des tests configure : appliquer une configuration sur un projet publish : publier un package sur un gestionnaire d'artefacts current : afficher les packages d\u00e9ploy\u00e9s sur un projet Options G\u00e9n\u00e9rales Ces options s'appliquent \u00e0 la plupart des commandes Option Courte Type Description help h bool Afficher l'aide domain d cha\u00eene Adresse du serveur applicatif et le port (format host:port) server s cha\u00eene Adresse du moteur DataStage username u cha\u00eene Utilisateur password p cha\u00eene Mot de passe de l'utilisateur config cha\u00eene chemin vers un fichier de configuration env cha\u00eene Un environnement d\u00e9fini dans le fichier de configuration project P cha\u00eene Nom du projet DataStage target cha\u00eene Chemin vers un dossier cible local verbose v bool Affichage plus verbeux output o bool Ecrire les informations dans le dossier cible format f cha\u00eene Format de la sortie standard, par d\u00e9faut du json \"pretty printed\", les formats possibles: table, mtable (format markdown), csv, json, html (pour certains cas) query cha\u00eene requ\u00eate \u00e0 appliquer \u00e0 la sortie standard, soit au format sql: \"select * from ?\" soit au format jsonata (https://jsonata.org/) Informations Ces options s'appliquent \u00e0 la commande get et indiquent quelles informations sont \u00e0 extraire ou g\u00e9n\u00e9rer Option Courte Type Description metadata m bool M\u00e9tadonn\u00e9es code c bool Code source image i bool Capture d'\u00e9cran export x bool Export isx checksum k bool Checksum ast bool Arbre syntaxique doc bool Documentation server bool Hostname du moteur project bool Nom du projet run r bool Informations sur la derni\u00e8re execution (n\u00e9cessite que l'operation console soit active) Options sp\u00e9cifiques list Option Courte Type Description info cha\u00eene Informations \u00e0 lister filter cha\u00eene Clause de filtrage (syntaxe de where sql) package Option Courte Type Description git g bool Le repository est de type git mode cha\u00eene FULL ou DELTA version cha\u00eene/array R\u00e9visions git pack cha\u00eene Nom du package deploy Option Courte Type Description git g bool Le repository est de type git pack cha\u00eene Nom du package Fichier de configuration Il est recommand\u00e9 de mettre en place un fichier de configuration adapt\u00e9 \u00e0 l'environnement et \u00e0 l'usage souhait\u00e9. Cela permetra de simplifier les commandes. Le fichier est peut-\u00eatre au format, YAML, JSON ou TOML , on peut y sp\u00e9cifier toutes les options dans les sections et sous-sections: defaults envs env Les options g\u00e9n\u00e9rales sont d\u00e9finies dans la section defaults on peut d\u00e9finir ensuite des environnements pour les options qui varieraient entre environnement. En cas d'option d\u00e9finie de mani\u00e8re multiple la priorit\u00e9 est la suivante: Ligne de commande > env > defaults Exemple au format yaml: defaults : dspath : \"C:/IBM/InformationServer\" domain : \"localhost:9446\" server : IS-ENGINEDOCKER username : isadmin password : \"password\" Exemple au format toml: [defaults] dspath = \"C:/IBM/InformationServer\" domain = \"localhost:9446\" server = IS-ENGINEDOCKER username = isadmin password = \"password\" Formats de sortie L'outil produit en fonction des commandes des informations: Dans des fichiers plats Sur la sortie standard Les fichiers plats sont en g\u00e9n\u00e9ral produit lors des commandes get ou init lorsque l'option output est \u00e0 true . La sortie standard peut \u00eatre de plusieurs types: Informations d'\u00e9xecutions (commandes init/package/deploy ) JSON ou multi-json (commandes list/get(metadata,ast,manifest,current,status) ) Lorsque la sortie est de type JSON on peut utiliser l'option query pour la formater. On peut \u00e9galement indiquer l'option format . Il est \u00e9galement possible de d\u00e9velopper des formateurs personnalis\u00e9s pour produire du html ou du markdown par exemple.","title":"Introduction"},{"location":"#dsplus","text":"Un outil en ligne de commande pour interagir avec DataStage et simplifier la mise en place d'une chaine CI/CD pour DataStage.","title":"DSPLUS"},{"location":"#fonctionalites","text":"Requ\u00eater les objets d'un projet Extraire ou g\u00e9n\u00e9rer les informations d'un objet Export M\u00e9tadonn\u00e9es Capture d'\u00e9cran Code source Checksum Arbre syntaxique Documentation Versionner un objet Synchroniser avec un syst\u00e8me de gestion de r\u00e9visions Packager un ensemble d'objets en un artefact D\u00e9ployer un artefact sur un projet Publier un artefact sur un gestionnaire d'artefacts Contr\u00f4ler le respect de normes de qualit\u00e9s Configurer un projet","title":"Fonctionalit\u00e9s"},{"location":"#syntaxe","text":"dsplus commande [options] Les options sont sp\u00e9cifi\u00e9es au format long --option valeur ou court (suivant les options) -o valeur Les options \u00e0 valeurs multiples sont sp\u00e9cifi\u00e9es de la mani\u00e8re suivante: --option valeur1 valeur2 Les syntaxes ci-dessous sont accept\u00e9es: --option=valeur --option valeur1 --option valeur2 Les options aux format court sont combinables -o -x -ox","title":"Syntaxe"},{"location":"#installation","text":"Placer l'ex\u00e9cutable correspondant au syst\u00e8me dans un r\u00e9pertoire faisant partie du PATH.","title":"Installation"},{"location":"#commandes","text":"Les commandes reconnues par d\u00e9fauts sont: projects : lister les projets list : lister les objets d'un projet get : extraire les information d'un objet d'un projet init : extraire les informations de tous les objets d'un projet status : comparer un projet avec un repository local package : packager les objets d'un repository local deploy : d\u00e9ployer un package vers un projet quality : controler le respect de normes de qualit\u00e9 coverage : \u00e9tat des tests configure : appliquer une configuration sur un projet publish : publier un package sur un gestionnaire d'artefacts current : afficher les packages d\u00e9ploy\u00e9s sur un projet","title":"Commandes"},{"location":"#options","text":"","title":"Options"},{"location":"#generales","text":"Ces options s'appliquent \u00e0 la plupart des commandes Option Courte Type Description help h bool Afficher l'aide domain d cha\u00eene Adresse du serveur applicatif et le port (format host:port) server s cha\u00eene Adresse du moteur DataStage username u cha\u00eene Utilisateur password p cha\u00eene Mot de passe de l'utilisateur config cha\u00eene chemin vers un fichier de configuration env cha\u00eene Un environnement d\u00e9fini dans le fichier de configuration project P cha\u00eene Nom du projet DataStage target cha\u00eene Chemin vers un dossier cible local verbose v bool Affichage plus verbeux output o bool Ecrire les informations dans le dossier cible format f cha\u00eene Format de la sortie standard, par d\u00e9faut du json \"pretty printed\", les formats possibles: table, mtable (format markdown), csv, json, html (pour certains cas) query cha\u00eene requ\u00eate \u00e0 appliquer \u00e0 la sortie standard, soit au format sql: \"select * from ?\" soit au format jsonata (https://jsonata.org/)","title":"G\u00e9n\u00e9rales"},{"location":"#informations","text":"Ces options s'appliquent \u00e0 la commande get et indiquent quelles informations sont \u00e0 extraire ou g\u00e9n\u00e9rer Option Courte Type Description metadata m bool M\u00e9tadonn\u00e9es code c bool Code source image i bool Capture d'\u00e9cran export x bool Export isx checksum k bool Checksum ast bool Arbre syntaxique doc bool Documentation server bool Hostname du moteur project bool Nom du projet run r bool Informations sur la derni\u00e8re execution (n\u00e9cessite que l'operation console soit active)","title":"Informations"},{"location":"#options-specifiques","text":"","title":"Options sp\u00e9cifiques"},{"location":"#list","text":"Option Courte Type Description info cha\u00eene Informations \u00e0 lister filter cha\u00eene Clause de filtrage (syntaxe de where sql)","title":"list"},{"location":"#package","text":"Option Courte Type Description git g bool Le repository est de type git mode cha\u00eene FULL ou DELTA version cha\u00eene/array R\u00e9visions git pack cha\u00eene Nom du package","title":"package"},{"location":"#deploy","text":"Option Courte Type Description git g bool Le repository est de type git pack cha\u00eene Nom du package","title":"deploy"},{"location":"#fichier-de-configuration","text":"Il est recommand\u00e9 de mettre en place un fichier de configuration adapt\u00e9 \u00e0 l'environnement et \u00e0 l'usage souhait\u00e9. Cela permetra de simplifier les commandes. Le fichier est peut-\u00eatre au format, YAML, JSON ou TOML , on peut y sp\u00e9cifier toutes les options dans les sections et sous-sections: defaults envs env Les options g\u00e9n\u00e9rales sont d\u00e9finies dans la section defaults on peut d\u00e9finir ensuite des environnements pour les options qui varieraient entre environnement. En cas d'option d\u00e9finie de mani\u00e8re multiple la priorit\u00e9 est la suivante: Ligne de commande > env > defaults Exemple au format yaml: defaults : dspath : \"C:/IBM/InformationServer\" domain : \"localhost:9446\" server : IS-ENGINEDOCKER username : isadmin password : \"password\" Exemple au format toml: [defaults] dspath = \"C:/IBM/InformationServer\" domain = \"localhost:9446\" server = IS-ENGINEDOCKER username = isadmin password = \"password\"","title":"Fichier de configuration"},{"location":"#formats-de-sortie","text":"L'outil produit en fonction des commandes des informations: Dans des fichiers plats Sur la sortie standard Les fichiers plats sont en g\u00e9n\u00e9ral produit lors des commandes get ou init lorsque l'option output est \u00e0 true . La sortie standard peut \u00eatre de plusieurs types: Informations d'\u00e9xecutions (commandes init/package/deploy ) JSON ou multi-json (commandes list/get(metadata,ast,manifest,current,status) ) Lorsque la sortie est de type JSON on peut utiliser l'option query pour la formater. On peut \u00e9galement indiquer l'option format . Il est \u00e9galement possible de d\u00e9velopper des formateurs personnalis\u00e9s pour produire du html ou du markdown par exemple.","title":"Formats de sortie"},{"location":"quickstart/","tags":"dsplus,howtos","text":"Quickstart Pr\u00e9paration Installation 1- T\u00e9l\u00e9charger la derni\u00e8re version de dsplus: https://d2ifpxp0ekyv6p.cloudfront.net/dsplus/latest/windows/dsplus.exe 2- Placer le binaire dans un r\u00e9pertoire sp\u00e9cifique 3- Ajouter le r\u00e9pertoire au PATH de l'utilisateur Configuration basique Cr\u00e9er le fichier dsplus.yml et l'enregistrer dans C:/Users/IdUser/ avec le contenu ci-dessous en modifiant les valeur de mani\u00e8re ad\u00e9quate: defaults : dspath : \"C:/IBM/InformationServer\" domain : \"adresseDomaine:portDomain\" server : \"adresseServeur\" username : \"userDataStage\" password : \"motDePasseDataStage\" dspath: emplacement de l'installation du client DataStage domain, serveur, username, password: identification du serveur et utilisateur DataStage. Pour r\u00e9f\u00e9rence, l'\u00e9quivalent lors de la connexion avec un client lourd: Tip L'emplacement et le nom du fichier de configuration dans l'exemple sont ceux par d\u00e9faut. Il est possible de le placer et le nommer autrement et ensuite d'y faire faire r\u00e9f\u00e9rence avec l'argument de ligne de commande --config ou via la variable d'environnement DSP_CONFIG . Note Dans l'exemple le mot de passe est enregistr\u00e9 en clair dans le fichier de configuration. Celui-ci peut \u00eatre encrypt\u00e9 (copier/coller l'int\u00e9gralit\u00e9 de la sortie produite dans le fichier de configuration): dsplus encrypt --password motDePasseDataStage Le mot de passe peut aussi \u00eatre enregistr\u00e9 en clair ou en crypt\u00e9 dans la variable d'environnement DSP_PASSWORD ou pass\u00e9 \u00e0 chaque appel \u00e0 dsplus via l'argument --password . Validation Pour v\u00e9rifier que tout fonctionne correctement ouvrir une invite de commande (ou powershell ou de pr\u00e9f\u00e9rence git bash) et entrer les commandes suivantes: dsplus version dsplus projects Info On recommande l'utilisation de Git Bash pour les am\u00e9liorations qu'il apporte: compl\u00e9tion, coloration et surtout prompt enrichi. Versionner des objet DataStage Cr\u00e9er ou copier un d\u00e9p\u00f4t Git Pour commencer \u00e0 versionner des objets DataStage sous Git, il faut d'abord un d\u00e9p\u00f4t Git. On peut le cr\u00e9er: git init demoProject cd demoProject Ou bien on peut cloner un d\u00e9p\u00f4t distant existant sur Azure DevOps: git clone http://adressedemoProject.git cd demoProject Cr\u00e9er une branche: git checkout -b myBranch Configurer le d\u00e9p\u00f4t Certaines options dsplus sont \u00e0 activer si ou souhaite l'ensemble de fonctionnalit\u00e9s. On peut le faire toujours via le fichier de configuration ou les variables d'environnement, pour plus de souplesse on le fait ici via la configuration locale du d\u00e9p\u00f4t git: 1- Lier le d\u00e9p\u00f4t \u00e0 un projet sp\u00e9cifique: git config dsplus.project demoProject Note Il n'est pas obligatoire de d\u00e9finir cette option mais cela permet de ne pas avoir \u00e0 sp\u00e9cifier l'argument --project \u00e0 chaque commande. 2- Filter les objets \u00e0 inclure par exemple en fonction de la cat\u00e9gorie dans le projet: git config dsplus.filters.category Categorie/Jobs/ Warning La configuration du d\u00e9p\u00f4t git est locale et ne sera pas partag\u00e9e avec les autres d\u00e9veloppeurs. V\u00e9rifier le p\u00e9rim\u00e8tre On peut v\u00e9rifier le p\u00e9rim\u00e8tre des objets qui seront int\u00e9gr\u00e9s au d\u00e9p\u00f4t: dsplus list O\u00f9 alors la commande suivante permet de voir l'\u00e9tat de synchronisation entre le d\u00e9p\u00f4t et le p\u00e9rim\u00e8tre DataStage: dsplus status Premier versionnement Pour initialiser le d\u00e9p\u00f4t avec l'int\u00e9gralit\u00e9 du p\u00e9rim\u00e8tre: dsplus init --export --metadata --output Cette commande exportera les objets DataStage et un fichier de m\u00e9tadonn\u00e9es. Pour enrichir le d\u00e9p\u00f4t d'autres informations il sera recommand\u00e9 d'activer plus d'options: dsplus init --export --metadata --output --image --ast --doc Ou la version raccourcie: dsplus init -xmoi --ast --doc V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Ajouter les nouveaux \u00e9l\u00e9ments: git add . V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Valider: git commit -m \"commentaire\" Pousser les modification: git push -u origin myBranch Note L'instruction -u origin myBranch n'est \u00e0 sp\u00e9cifier que lors du 1er push sur une nouvelle branche. Deuxi\u00e8me versionnement Apr\u00e8s modification ou cr\u00e9ation d'un ou plusieurs jobs: dsplus status Ajouter les objets modifi\u00e9s/cr\u00e9\u00e9s: dsplus get -xmoi --ast --doc --job job1 job2 Info L'option job peut prendre plusieurs arguments, ici 2 jobs \u00e0 ajouter. Alternativement en mode batch: dsplus init -xmoi --ast --doc --update V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Explorer les modifications: git diff --name-status HEAD^1 -- *.isx git diff -- */job1.ast.json Ajouter les nouveaux \u00e9l\u00e9ments: git add . V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Valider: git commit -m \"commentaire\" Pousser les modification: git push","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#preparation","text":"","title":"Pr\u00e9paration"},{"location":"quickstart/#installation","text":"1- T\u00e9l\u00e9charger la derni\u00e8re version de dsplus: https://d2ifpxp0ekyv6p.cloudfront.net/dsplus/latest/windows/dsplus.exe 2- Placer le binaire dans un r\u00e9pertoire sp\u00e9cifique 3- Ajouter le r\u00e9pertoire au PATH de l'utilisateur","title":"Installation"},{"location":"quickstart/#configuration-basique","text":"Cr\u00e9er le fichier dsplus.yml et l'enregistrer dans C:/Users/IdUser/ avec le contenu ci-dessous en modifiant les valeur de mani\u00e8re ad\u00e9quate: defaults : dspath : \"C:/IBM/InformationServer\" domain : \"adresseDomaine:portDomain\" server : \"adresseServeur\" username : \"userDataStage\" password : \"motDePasseDataStage\" dspath: emplacement de l'installation du client DataStage domain, serveur, username, password: identification du serveur et utilisateur DataStage. Pour r\u00e9f\u00e9rence, l'\u00e9quivalent lors de la connexion avec un client lourd: Tip L'emplacement et le nom du fichier de configuration dans l'exemple sont ceux par d\u00e9faut. Il est possible de le placer et le nommer autrement et ensuite d'y faire faire r\u00e9f\u00e9rence avec l'argument de ligne de commande --config ou via la variable d'environnement DSP_CONFIG . Note Dans l'exemple le mot de passe est enregistr\u00e9 en clair dans le fichier de configuration. Celui-ci peut \u00eatre encrypt\u00e9 (copier/coller l'int\u00e9gralit\u00e9 de la sortie produite dans le fichier de configuration): dsplus encrypt --password motDePasseDataStage Le mot de passe peut aussi \u00eatre enregistr\u00e9 en clair ou en crypt\u00e9 dans la variable d'environnement DSP_PASSWORD ou pass\u00e9 \u00e0 chaque appel \u00e0 dsplus via l'argument --password .","title":"Configuration basique"},{"location":"quickstart/#validation","text":"Pour v\u00e9rifier que tout fonctionne correctement ouvrir une invite de commande (ou powershell ou de pr\u00e9f\u00e9rence git bash) et entrer les commandes suivantes: dsplus version dsplus projects Info On recommande l'utilisation de Git Bash pour les am\u00e9liorations qu'il apporte: compl\u00e9tion, coloration et surtout prompt enrichi.","title":"Validation"},{"location":"quickstart/#versionner-des-objet-datastage","text":"","title":"Versionner des objet DataStage"},{"location":"quickstart/#creer-ou-copier-un-depot-git","text":"Pour commencer \u00e0 versionner des objets DataStage sous Git, il faut d'abord un d\u00e9p\u00f4t Git. On peut le cr\u00e9er: git init demoProject cd demoProject Ou bien on peut cloner un d\u00e9p\u00f4t distant existant sur Azure DevOps: git clone http://adressedemoProject.git cd demoProject Cr\u00e9er une branche: git checkout -b myBranch","title":"Cr\u00e9er ou copier un d\u00e9p\u00f4t Git"},{"location":"quickstart/#configurer-le-depot","text":"Certaines options dsplus sont \u00e0 activer si ou souhaite l'ensemble de fonctionnalit\u00e9s. On peut le faire toujours via le fichier de configuration ou les variables d'environnement, pour plus de souplesse on le fait ici via la configuration locale du d\u00e9p\u00f4t git: 1- Lier le d\u00e9p\u00f4t \u00e0 un projet sp\u00e9cifique: git config dsplus.project demoProject Note Il n'est pas obligatoire de d\u00e9finir cette option mais cela permet de ne pas avoir \u00e0 sp\u00e9cifier l'argument --project \u00e0 chaque commande. 2- Filter les objets \u00e0 inclure par exemple en fonction de la cat\u00e9gorie dans le projet: git config dsplus.filters.category Categorie/Jobs/ Warning La configuration du d\u00e9p\u00f4t git est locale et ne sera pas partag\u00e9e avec les autres d\u00e9veloppeurs.","title":"Configurer le d\u00e9p\u00f4t"},{"location":"quickstart/#verifier-le-perimetre","text":"On peut v\u00e9rifier le p\u00e9rim\u00e8tre des objets qui seront int\u00e9gr\u00e9s au d\u00e9p\u00f4t: dsplus list O\u00f9 alors la commande suivante permet de voir l'\u00e9tat de synchronisation entre le d\u00e9p\u00f4t et le p\u00e9rim\u00e8tre DataStage: dsplus status","title":"V\u00e9rifier le p\u00e9rim\u00e8tre"},{"location":"quickstart/#premier-versionnement","text":"Pour initialiser le d\u00e9p\u00f4t avec l'int\u00e9gralit\u00e9 du p\u00e9rim\u00e8tre: dsplus init --export --metadata --output Cette commande exportera les objets DataStage et un fichier de m\u00e9tadonn\u00e9es. Pour enrichir le d\u00e9p\u00f4t d'autres informations il sera recommand\u00e9 d'activer plus d'options: dsplus init --export --metadata --output --image --ast --doc Ou la version raccourcie: dsplus init -xmoi --ast --doc V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Ajouter les nouveaux \u00e9l\u00e9ments: git add . V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Valider: git commit -m \"commentaire\" Pousser les modification: git push -u origin myBranch Note L'instruction -u origin myBranch n'est \u00e0 sp\u00e9cifier que lors du 1er push sur une nouvelle branche.","title":"Premier versionnement"},{"location":"quickstart/#deuxieme-versionnement","text":"Apr\u00e8s modification ou cr\u00e9ation d'un ou plusieurs jobs: dsplus status Ajouter les objets modifi\u00e9s/cr\u00e9\u00e9s: dsplus get -xmoi --ast --doc --job job1 job2 Info L'option job peut prendre plusieurs arguments, ici 2 jobs \u00e0 ajouter. Alternativement en mode batch: dsplus init -xmoi --ast --doc --update V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Explorer les modifications: git diff --name-status HEAD^1 -- *.isx git diff -- */job1.ast.json Ajouter les nouveaux \u00e9l\u00e9ments: git add . V\u00e9rifier l'\u00e9tat du d\u00e9p\u00f4t: git status Valider: git commit -m \"commentaire\" Pousser les modification: git push","title":"Deuxi\u00e8me versionnement"},{"location":"config/confFile/","tags":"dsplus,documentation","text":"Fichier de configuration L'utilisation d'un ou plusieurs fichiers de configuration permet de simplifier grandement les commandes ainsi que d'\u00e9tendre les possibilit\u00e9s de l'outil. Emplacement et nom par d\u00e9faut L'outil cherche \u00e0 charger par d\u00e9faut le fichier $HOME/dsplus.[ext] . Cet emplacement peut \u00eatre surcharg\u00e9 par la variable d'environnement DSP_CONFIG Ou indiqu\u00e9 \u00e0 l'ex\u00e9cution par l'option --config Format et structure Le fichier peut \u00eatre aux formats: yaml, toml , ou json. L'extension peut \u00eatre donc: yml/yaml cfg (format toml) json yaml toml json defaults : dspath : \"C:/IBM/InformationServer\" domain : \"adresseDomaine:portDomain\" server : \"adresseServeur\" username : \"userDataStage\" password : \"motDePasseDataStage\" [defaults] dspath = \"C:/IBM/InformationServer\" domain = \"adresseDomaine:portDomain\" server = \"adresseServeur\" username = \"userDataStage\" password = \"motDePasseDataStage\" { \"defaults\" : { \"dspath\" : \"C:/IBM/InformationServer\" , \"domain\" : \"adresseDomaine:portDomain\" , \"server\" : \"adresseServeur\" , \"username\" : \"userDataStage\" , \"password\" : \"motDePasseDataStage\" } } Tip On recomandera de pr\u00e9f\u00e9rence les formats yaml ou toml ceux-ci permettant notamment l'ajout de commentaires contrairement au json. Structure et Sections Les sections d\u00e9finies et hi\u00e9rarchis\u00e9es ainsi sont possibles: defaults envs Nom Env security dependencies plugins shortcuts filters Les param\u00e8tres d\u00e9finis dans les section envs surchargent ceux d\u00e9finis en defaults et sont eux-m\u00eames surcharg\u00e9s par les options de la ligne de commande. Lors de l'ex\u00e9cution de la commande on fait r\u00e9f\u00e9rence \u00e0 l'environnement via l'option env ou en valorisant une exportant d'environnement env . Options avanc\u00e9es Filtres L'options filter permet d\u00e9j\u00e0 de filtrer les objets par une clause syntaxe sql. Dans certains cas on peut vouloir cumuler des filtres pr\u00e9d\u00e9finis pour un environnement avec des personnalis\u00e9s \u00e0 l'appel. Le fichier de configuration accepte en sous-section des environnements une section [filters] qui autorise des expressions r\u00e9guli\u00e8res: Raccourcis Il est possible de d\u00e9finir dans le fichier de configuration des alias ou des raccourcis afin de simplifier ou personnaliser son utilisation. On les d\u00e9finis dans la section [shortcuts] par les commandes et options que l'on souhaite. Exemple de 2 alias (avec diff\u00e9rentes syntaxes): On obtient ainsi les \u00e9quivalances suivantes: Plugins Il est possible de d\u00e9finir dans le fichier de configuration des plugins \u00e0 ex\u00e9cuter dans certains contextes et \u00e9v\u00e8nements. Voir la section d\u00e9di\u00e9e pour plus de d\u00e9tails. Options sp\u00e9ciales Les options ci-dessous ne sont pas modifiable par ligne de commande mais peuvent \u00eatre modifi\u00e9es par fichier de configuration, variable d'environnement ou configuration git. Certaines de ces options peuvent n\u00e9cessit\u00e9 une assistance. Option Commande Type Description D\u00e9faut maxget init int Nombre d'op\u00e9rations en parall\u00e8le 10 maxexport init int Nombre d'asset par batch d'export 50 rollback deploy bool Produit un isx des assets modifi\u00e9s avant de les \u00e9craser (mode FULL) deletes deploy bool Supprime les assets supprim\u00e9s de git deletes git/init chaine Format et destination (avec target comme racine) des fichiers produits. Syntaxe avec des placesholders. [category]/[name]/[name] extdir package chaine R\u00e9pertoire \u00e0 la racine du repository git contenant des assets externes non-datastage \u00e0 packager/deployer external exttar package bool les assets externes sont d'abord r\u00e9unis en un tar avant d'\u00eatre packag\u00e9s. customparser get chaine chemin vers un fichier pour personnaliser le parser qui g\u00e9n\u00e8re la repr\u00e9sentation json du job compilation get/init/package bool active la v\u00e9rification de compilation du job","title":"Fichier de configuration"},{"location":"config/confFile/#fichier-de-configuration","text":"L'utilisation d'un ou plusieurs fichiers de configuration permet de simplifier grandement les commandes ainsi que d'\u00e9tendre les possibilit\u00e9s de l'outil.","title":"Fichier de configuration"},{"location":"config/confFile/#emplacement-et-nom-par-defaut","text":"L'outil cherche \u00e0 charger par d\u00e9faut le fichier $HOME/dsplus.[ext] . Cet emplacement peut \u00eatre surcharg\u00e9 par la variable d'environnement DSP_CONFIG Ou indiqu\u00e9 \u00e0 l'ex\u00e9cution par l'option --config","title":"Emplacement et nom par d\u00e9faut"},{"location":"config/confFile/#format-et-structure","text":"Le fichier peut \u00eatre aux formats: yaml, toml , ou json. L'extension peut \u00eatre donc: yml/yaml cfg (format toml) json yaml toml json defaults : dspath : \"C:/IBM/InformationServer\" domain : \"adresseDomaine:portDomain\" server : \"adresseServeur\" username : \"userDataStage\" password : \"motDePasseDataStage\" [defaults] dspath = \"C:/IBM/InformationServer\" domain = \"adresseDomaine:portDomain\" server = \"adresseServeur\" username = \"userDataStage\" password = \"motDePasseDataStage\" { \"defaults\" : { \"dspath\" : \"C:/IBM/InformationServer\" , \"domain\" : \"adresseDomaine:portDomain\" , \"server\" : \"adresseServeur\" , \"username\" : \"userDataStage\" , \"password\" : \"motDePasseDataStage\" } } Tip On recomandera de pr\u00e9f\u00e9rence les formats yaml ou toml ceux-ci permettant notamment l'ajout de commentaires contrairement au json.","title":"Format et structure"},{"location":"config/confFile/#structure-et-sections","text":"Les sections d\u00e9finies et hi\u00e9rarchis\u00e9es ainsi sont possibles: defaults envs Nom Env security dependencies plugins shortcuts filters Les param\u00e8tres d\u00e9finis dans les section envs surchargent ceux d\u00e9finis en defaults et sont eux-m\u00eames surcharg\u00e9s par les options de la ligne de commande. Lors de l'ex\u00e9cution de la commande on fait r\u00e9f\u00e9rence \u00e0 l'environnement via l'option env ou en valorisant une exportant d'environnement env .","title":"Structure et Sections"},{"location":"config/confFile/#options-avancees","text":"","title":"Options avanc\u00e9es"},{"location":"config/confFile/#filtres","text":"L'options filter permet d\u00e9j\u00e0 de filtrer les objets par une clause syntaxe sql. Dans certains cas on peut vouloir cumuler des filtres pr\u00e9d\u00e9finis pour un environnement avec des personnalis\u00e9s \u00e0 l'appel. Le fichier de configuration accepte en sous-section des environnements une section [filters] qui autorise des expressions r\u00e9guli\u00e8res:","title":"Filtres"},{"location":"config/confFile/#raccourcis","text":"Il est possible de d\u00e9finir dans le fichier de configuration des alias ou des raccourcis afin de simplifier ou personnaliser son utilisation. On les d\u00e9finis dans la section [shortcuts] par les commandes et options que l'on souhaite. Exemple de 2 alias (avec diff\u00e9rentes syntaxes): On obtient ainsi les \u00e9quivalances suivantes:","title":"Raccourcis"},{"location":"config/confFile/#plugins","text":"Il est possible de d\u00e9finir dans le fichier de configuration des plugins \u00e0 ex\u00e9cuter dans certains contextes et \u00e9v\u00e8nements. Voir la section d\u00e9di\u00e9e pour plus de d\u00e9tails.","title":"Plugins"},{"location":"config/confFile/#options-speciales","text":"Les options ci-dessous ne sont pas modifiable par ligne de commande mais peuvent \u00eatre modifi\u00e9es par fichier de configuration, variable d'environnement ou configuration git. Certaines de ces options peuvent n\u00e9cessit\u00e9 une assistance. Option Commande Type Description D\u00e9faut maxget init int Nombre d'op\u00e9rations en parall\u00e8le 10 maxexport init int Nombre d'asset par batch d'export 50 rollback deploy bool Produit un isx des assets modifi\u00e9s avant de les \u00e9craser (mode FULL) deletes deploy bool Supprime les assets supprim\u00e9s de git deletes git/init chaine Format et destination (avec target comme racine) des fichiers produits. Syntaxe avec des placesholders. [category]/[name]/[name] extdir package chaine R\u00e9pertoire \u00e0 la racine du repository git contenant des assets externes non-datastage \u00e0 packager/deployer external exttar package bool les assets externes sont d'abord r\u00e9unis en un tar avant d'\u00eatre packag\u00e9s. customparser get chaine chemin vers un fichier pour personnaliser le parser qui g\u00e9n\u00e8re la repr\u00e9sentation json du job compilation get/init/package bool active la v\u00e9rification de compilation du job","title":"Options sp\u00e9ciales"},{"location":"config/confFile/#_1","text":"","title":""},{"location":"config/env/","tags":"dsplus,documentation","text":"Variables d'environnement Toute option peut \u00eatre valoris\u00e9e par variable d'environnement en respectant la nomenclature suivante: DSP_[OPTION] L'option devant \u00eatre en majuscules, ex: DSP_PROJECT est \u00e9quivalent \u00e0 l'option --project Lles commandes dsplus ci-dessous sont \u00e9quivalentes: dsplus list --project dstage1 ###### DSP_PROJECT = dstage1 dsplus list ##### export DSP_PROJECT = dstage1 dsplus list Cas sp\u00e9ciaux Certaines options d\u00e9finies dans le fichier de configuration peuvent \u00eatre de type hierarchiques. Par exemple l'option filters : filters : category : Jobs La convention pour la variable d'environnement \u00e9quivalente est: DSP_FILTERS_category=Jobs Warning Les options de type array ne sont pas support\u00e9es Fichier .env Les variables d'environnement peuvent \u00eatre \u00e9galement d\u00e9finies dans un fichier .env situ\u00e9 dans le r\u00e9pertoire courant.","title":"Variables d'environnement"},{"location":"config/env/#variables-denvironnement","text":"Toute option peut \u00eatre valoris\u00e9e par variable d'environnement en respectant la nomenclature suivante: DSP_[OPTION] L'option devant \u00eatre en majuscules, ex: DSP_PROJECT est \u00e9quivalent \u00e0 l'option --project Lles commandes dsplus ci-dessous sont \u00e9quivalentes: dsplus list --project dstage1 ###### DSP_PROJECT = dstage1 dsplus list ##### export DSP_PROJECT = dstage1 dsplus list","title":"Variables d'environnement"},{"location":"config/env/#cas-speciaux","text":"Certaines options d\u00e9finies dans le fichier de configuration peuvent \u00eatre de type hierarchiques. Par exemple l'option filters : filters : category : Jobs La convention pour la variable d'environnement \u00e9quivalente est: DSP_FILTERS_category=Jobs Warning Les options de type array ne sont pas support\u00e9es","title":"Cas sp\u00e9ciaux"},{"location":"config/env/#fichier-env","text":"Les variables d'environnement peuvent \u00eatre \u00e9galement d\u00e9finies dans un fichier .env situ\u00e9 dans le r\u00e9pertoire courant.","title":"Fichier .env"},{"location":"config/git/","tags":"dsplus,documentation","text":"Configuration Git Les options peuvent \u00e9galement \u00eatre sp\u00e9cifi\u00e9es via la configuration du repository git local en respectant la nomenclature suivante: dsplus.[option] Par exemple les commandes ci-dessous sont \u00e9quivalents: dsplus list --project dstage1 ###### git config dsplus.project dstage1 dsplus list Cette fonctionnalit\u00e9 permet donc d'avoir des options d\u00e9finies dans les param\u00eatres du repository git et ne plus avoir \u00e0 les entrer dans la ligne de commande. De mani\u00e8re g\u00e9n\u00e9rale on y d\u00e9finira par exemple les options: dsplus.project: Projet connect\u00e9 au repository dsplus.filters.category: Cat\u00e9gorie du projet dsplus.git: true Info Les branches sont \u00e9galement support\u00e9es. Le format est alors dsplus.branche.option","title":"Configuration git"},{"location":"config/git/#configuration-git","text":"Les options peuvent \u00e9galement \u00eatre sp\u00e9cifi\u00e9es via la configuration du repository git local en respectant la nomenclature suivante: dsplus.[option] Par exemple les commandes ci-dessous sont \u00e9quivalents: dsplus list --project dstage1 ###### git config dsplus.project dstage1 dsplus list Cette fonctionnalit\u00e9 permet donc d'avoir des options d\u00e9finies dans les param\u00eatres du repository git et ne plus avoir \u00e0 les entrer dans la ligne de commande. De mani\u00e8re g\u00e9n\u00e9rale on y d\u00e9finira par exemple les options: dsplus.project: Projet connect\u00e9 au repository dsplus.filters.category: Cat\u00e9gorie du projet dsplus.git: true Info Les branches sont \u00e9galement support\u00e9es. Le format est alors dsplus.branche.option","title":"Configuration Git"},{"location":"features/check/","tags":"dsplus,documentation","text":"Check V\u00e9rifier l'int\u00e9grit\u00e9 d'un package contre un projet. Lorsque le checksums des objets d'un repository est pr\u00e9sent, celui-ci est int\u00e9gr\u00e9 au manifeste lors du packaging. Avec cette commande on peut v\u00e9rifier l'int\u00e9grit\u00e9 d'un package contre un projet apr\u00e8s un d\u00e9ploiement. Warning A l'heure actuelle cette commande ne fonctionne pas pour les parameterSets. Syntaxe dsplus check --pack Pack.isx --project Projet [--verbose] Format de sortie La sortie est au format json/texte: La liste des objets dont le checksum ne correspond pas au projet au format json (avec l'option --verbose tous les objets du package sont list\u00e9s): asset: nom de l'objet type: type de l'objet csum1: le checksum de l'objet dans le package csum2: le checksum de l'objet dans le projet modificationTimestamp: date de modification de l'objet dans le projet modifiedByUser: utilisateur ayant effectu\u00e9 la derni\u00e8re modification Le statut de la v\u00e9rification au format texte En cas de non int\u00e9grit\u00e9 la commande fini en erreur. Exemples","title":"check"},{"location":"features/check/#check","text":"V\u00e9rifier l'int\u00e9grit\u00e9 d'un package contre un projet. Lorsque le checksums des objets d'un repository est pr\u00e9sent, celui-ci est int\u00e9gr\u00e9 au manifeste lors du packaging. Avec cette commande on peut v\u00e9rifier l'int\u00e9grit\u00e9 d'un package contre un projet apr\u00e8s un d\u00e9ploiement. Warning A l'heure actuelle cette commande ne fonctionne pas pour les parameterSets.","title":"Check"},{"location":"features/check/#syntaxe","text":"dsplus check --pack Pack.isx --project Projet [--verbose]","title":"Syntaxe"},{"location":"features/check/#format-de-sortie","text":"La sortie est au format json/texte: La liste des objets dont le checksum ne correspond pas au projet au format json (avec l'option --verbose tous les objets du package sont list\u00e9s): asset: nom de l'objet type: type de l'objet csum1: le checksum de l'objet dans le package csum2: le checksum de l'objet dans le projet modificationTimestamp: date de modification de l'objet dans le projet modifiedByUser: utilisateur ayant effectu\u00e9 la derni\u00e8re modification Le statut de la v\u00e9rification au format texte En cas de non int\u00e9grit\u00e9 la commande fini en erreur.","title":"Format de sortie"},{"location":"features/check/#exemples","text":"","title":"Exemples"},{"location":"features/configure/","tags":"dsplus,documentation","text":"Configure Applique la configuration d\u00e9clar\u00e9e dans le fichier project.yml \u00e0 un projet. Cette configuration peut concerner les variables d'environnement ou les propri\u00e9t\u00e9s du projet. Syntaxe dsplus configure --project Projet Fichier project.yml 2 types de donn\u00e9es sont prises en compte par cette commande: env: variables d'environnements properties: propri\u00e9t\u00e9s env Chaque variable doit \u00eatre d\u00e9finie de la mani\u00e8re suivante: NomVariable : value : Valeur type : STRING|ENCRYPTED prompt : Libell\u00e9 Format de sortie Pas de sortie produite. Exemples","title":"configure"},{"location":"features/configure/#configure","text":"Applique la configuration d\u00e9clar\u00e9e dans le fichier project.yml \u00e0 un projet. Cette configuration peut concerner les variables d'environnement ou les propri\u00e9t\u00e9s du projet.","title":"Configure"},{"location":"features/configure/#syntaxe","text":"dsplus configure --project Projet","title":"Syntaxe"},{"location":"features/configure/#fichier-projectyml","text":"2 types de donn\u00e9es sont prises en compte par cette commande: env: variables d'environnements properties: propri\u00e9t\u00e9s","title":"Fichier project.yml"},{"location":"features/configure/#env","text":"Chaque variable doit \u00eatre d\u00e9finie de la mani\u00e8re suivante: NomVariable : value : Valeur type : STRING|ENCRYPTED prompt : Libell\u00e9","title":"env"},{"location":"features/configure/#format-de-sortie","text":"Pas de sortie produite.","title":"Format de sortie"},{"location":"features/configure/#exemples","text":"","title":"Exemples"},{"location":"features/coverage/","tags":"dsplus,documentation","text":"coverage Extrait le taux de tests d'un projet. Cette commande produit 3 informations: Taux de jobs r\u00e9ussis Taux de jobs en \u00e9chec Taux de jobs non test\u00e9s Peut \u00eatre appliqu\u00e9e directement \u00e0 un projet ou pour v\u00e9rifier le taux de tests d'un package contre un projet. Info Un test est consid\u00e9r\u00e9 r\u00e9ussi si le job a \u00e9t\u00e9 \u00e9xecut\u00e9 correctement apr\u00e8s sa derni\u00e8re modification. Syntaxe dsplus coverage --project [--pack] [--verbose] [options] Avec l'options verbose la liste compl\u00e8te des objets concern\u00e9s est produite avec les information suivantes: Nom Date de modification Date d'\u00e9xecution Statut Temps d'\u00e9xecution Erreurs Projet dsplus coverage --project Projet Le perim\u00e8tre v\u00e9rifi\u00e9 est celui que renverrais la commande dsplus list la m\u00eame syntaxe s'applique. Package dsplus coverage --pack Pack.isx --project Projet Format de sortie La sortie est au format json . Formateurs additionnels Avec l'option --format junit les informations sont produites au format xml standard de junit . Exemples","title":"coverage"},{"location":"features/coverage/#coverage","text":"Extrait le taux de tests d'un projet. Cette commande produit 3 informations: Taux de jobs r\u00e9ussis Taux de jobs en \u00e9chec Taux de jobs non test\u00e9s Peut \u00eatre appliqu\u00e9e directement \u00e0 un projet ou pour v\u00e9rifier le taux de tests d'un package contre un projet. Info Un test est consid\u00e9r\u00e9 r\u00e9ussi si le job a \u00e9t\u00e9 \u00e9xecut\u00e9 correctement apr\u00e8s sa derni\u00e8re modification.","title":"coverage"},{"location":"features/coverage/#syntaxe","text":"dsplus coverage --project [--pack] [--verbose] [options] Avec l'options verbose la liste compl\u00e8te des objets concern\u00e9s est produite avec les information suivantes: Nom Date de modification Date d'\u00e9xecution Statut Temps d'\u00e9xecution Erreurs","title":"Syntaxe"},{"location":"features/coverage/#projet","text":"dsplus coverage --project Projet Le perim\u00e8tre v\u00e9rifi\u00e9 est celui que renverrais la commande dsplus list la m\u00eame syntaxe s'applique.","title":"Projet"},{"location":"features/coverage/#package","text":"dsplus coverage --pack Pack.isx --project Projet","title":"Package"},{"location":"features/coverage/#format-de-sortie","text":"La sortie est au format json .","title":"Format de sortie"},{"location":"features/coverage/#formateurs-additionnels","text":"Avec l'option --format junit les informations sont produites au format xml standard de junit .","title":"Formateurs additionnels"},{"location":"features/coverage/#exemples","text":"","title":"Exemples"},{"location":"features/current/","tags":"dsplus,documentation","text":"Current Produit les information de version d'un projet: name: nom de l'artefact repository: nom de la racine de l'artifact (en cas d'utilisation d'un gestionnaire d'artefacts) git: revision git mode: mode de consitution du package (FULL/DELTA) remote: url du repository git d'origine created: date de consitution du package deployed: date de d\u00e9ploiement version: version d\u00e9clar\u00e9e \u00e0 la constitution du package Info Cette commande peut \u00eatre utilis\u00e9e si les d\u00e9ploiements sont faits avec l'option trackversions activ\u00e9e. Syntaxe dsplus current --project Projet [--verbose] Format de sortie Sortie au format JSON . Exemples","title":"current"},{"location":"features/current/#current","text":"Produit les information de version d'un projet: name: nom de l'artefact repository: nom de la racine de l'artifact (en cas d'utilisation d'un gestionnaire d'artefacts) git: revision git mode: mode de consitution du package (FULL/DELTA) remote: url du repository git d'origine created: date de consitution du package deployed: date de d\u00e9ploiement version: version d\u00e9clar\u00e9e \u00e0 la constitution du package Info Cette commande peut \u00eatre utilis\u00e9e si les d\u00e9ploiements sont faits avec l'option trackversions activ\u00e9e.","title":"Current"},{"location":"features/current/#syntaxe","text":"dsplus current --project Projet [--verbose]","title":"Syntaxe"},{"location":"features/current/#format-de-sortie","text":"Sortie au format JSON .","title":"Format de sortie"},{"location":"features/current/#exemples","text":"","title":"Exemples"},{"location":"features/deploy/","tags":"dsplus,documentation","text":"Deploy Deploie des exports ou des packages vers un projet Syntaxe dsplus deploy --pack pack.isx/--isx export.isx --project Project Options pack : nom du package \u00e0 d\u00e9ployer isx: nom de l'export isx \u00e0 d\u00e9ployer project : nom du projet cible Objets externes Si le package contient des objets externes ils seront d\u00e9ploy\u00e9s dans le r\u00e9p\u00e9rtoire courant par d\u00e9faut ou dans celui d\u00e9fini par l'option target . Options sp\u00e9ciales rollback: en mode DELTA, un export de sauvegarde est fait avant de d\u00e9ployer deletes: les objets supprim\u00e9s du repository source sont supprim\u00e9s du projet cible trackversions: int\u00e9gre au projet des informations issues du manifeste Ces options sont toutes de type bool\u00e9\u00e9nnes et peuvent \u00eatre sp\u00e9cifi\u00e9es soit dans le fichier de configuration soit via les variables d'environnement: DSP_ROLLBACK, DSP_DELETES, DSP_TRACKVERSION V\u00e9rifier l'int\u00e9grit\u00e9 d'un package d\u00e9ploy\u00e9 Si les checksums des objets \u00e9taient pr\u00e9sents au moment du packaging, ceux-ci seront dans le manifeste et pourront \u00eatre compar\u00e9s contre un projet avec la commande dsplus check : dsplus check --pack pack.isx --project Project Format de sortie La sortie est de type informationnelle.","title":"deploy"},{"location":"features/deploy/#deploy","text":"Deploie des exports ou des packages vers un projet","title":"Deploy"},{"location":"features/deploy/#syntaxe","text":"dsplus deploy --pack pack.isx/--isx export.isx --project Project","title":"Syntaxe"},{"location":"features/deploy/#options","text":"pack : nom du package \u00e0 d\u00e9ployer isx: nom de l'export isx \u00e0 d\u00e9ployer project : nom du projet cible","title":"Options"},{"location":"features/deploy/#objets-externes","text":"Si le package contient des objets externes ils seront d\u00e9ploy\u00e9s dans le r\u00e9p\u00e9rtoire courant par d\u00e9faut ou dans celui d\u00e9fini par l'option target .","title":"Objets externes"},{"location":"features/deploy/#options-speciales","text":"rollback: en mode DELTA, un export de sauvegarde est fait avant de d\u00e9ployer deletes: les objets supprim\u00e9s du repository source sont supprim\u00e9s du projet cible trackversions: int\u00e9gre au projet des informations issues du manifeste Ces options sont toutes de type bool\u00e9\u00e9nnes et peuvent \u00eatre sp\u00e9cifi\u00e9es soit dans le fichier de configuration soit via les variables d'environnement: DSP_ROLLBACK, DSP_DELETES, DSP_TRACKVERSION","title":"Options sp\u00e9ciales"},{"location":"features/deploy/#verifier-lintegrite-dun-package-deploye","text":"Si les checksums des objets \u00e9taient pr\u00e9sents au moment du packaging, ceux-ci seront dans le manifeste et pourront \u00eatre compar\u00e9s contre un projet avec la commande dsplus check : dsplus check --pack pack.isx --project Project","title":"V\u00e9rifier l'int\u00e9grit\u00e9 d'un package d\u00e9ploy\u00e9"},{"location":"features/deploy/#format-de-sortie","text":"La sortie est de type informationnelle.","title":"Format de sortie"},{"location":"features/encrypt/","tags":"dsplus,documentation","text":"Encrypt Encrypte un mot de passe. Par d\u00e9faut le chiffrement utilis\u00e9 est celui d'Information Server. Il est possible de choisir d'autres type de chiffrements. Le mot de passe ainsi encrypt\u00e9 peut \u00eatre utilis\u00e9 pour s\u00e9curiser les lignes de commandes ou les fichiers de configuration de dsplus. Syntaxe dsplus encrypt --password Chiffrements Le choix du type de chiffrement se fait via l'option security.provider/DSP_SECURITY_provider . Celle-ci peut prendre les valeurs: iisenc (d\u00e9faut) dsplus custom dsplus Ce chiffrement plus s\u00e9curis\u00e9 que iisenc (256 vs 128) utilise un vecteur d'initialisation al\u00e9atoire et une cl\u00e9 unique par poste, ainsi une cl\u00e9 g\u00e9n\u00e9r\u00e9e ne le sera qu'une seule fois et ne pourra pas \u00eatre r\u00e9utilis\u00e9e sur un autre poste. custom On peut d\u00e9finir son propre mode de chiffrement, pour cela il est n\u00e9cessaire de d\u00e9finir les options: security.provider/DSP_SECURITY_provider: nom de la m\u00e9thode (ex: custom ) security.key/DSP_SECURITY_key: cl\u00e9 de chiffrement security.iv/DSP_SECURITY_iv : taille du vecteur d'initialisation security.algorithm/DSP_SECURITY_algorithm: algorythme de chiffrement Format de sortie La sortie est de type texte sous la forme {chiffrement}MotDePasse Exemples","title":"encrypt"},{"location":"features/encrypt/#encrypt","text":"Encrypte un mot de passe. Par d\u00e9faut le chiffrement utilis\u00e9 est celui d'Information Server. Il est possible de choisir d'autres type de chiffrements. Le mot de passe ainsi encrypt\u00e9 peut \u00eatre utilis\u00e9 pour s\u00e9curiser les lignes de commandes ou les fichiers de configuration de dsplus.","title":"Encrypt"},{"location":"features/encrypt/#syntaxe","text":"dsplus encrypt --password","title":"Syntaxe"},{"location":"features/encrypt/#chiffrements","text":"Le choix du type de chiffrement se fait via l'option security.provider/DSP_SECURITY_provider . Celle-ci peut prendre les valeurs: iisenc (d\u00e9faut) dsplus custom","title":"Chiffrements"},{"location":"features/encrypt/#dsplus","text":"Ce chiffrement plus s\u00e9curis\u00e9 que iisenc (256 vs 128) utilise un vecteur d'initialisation al\u00e9atoire et une cl\u00e9 unique par poste, ainsi une cl\u00e9 g\u00e9n\u00e9r\u00e9e ne le sera qu'une seule fois et ne pourra pas \u00eatre r\u00e9utilis\u00e9e sur un autre poste.","title":"dsplus"},{"location":"features/encrypt/#custom","text":"On peut d\u00e9finir son propre mode de chiffrement, pour cela il est n\u00e9cessaire de d\u00e9finir les options: security.provider/DSP_SECURITY_provider: nom de la m\u00e9thode (ex: custom ) security.key/DSP_SECURITY_key: cl\u00e9 de chiffrement security.iv/DSP_SECURITY_iv : taille du vecteur d'initialisation security.algorithm/DSP_SECURITY_algorithm: algorythme de chiffrement","title":"custom"},{"location":"features/encrypt/#format-de-sortie","text":"La sortie est de type texte sous la forme {chiffrement}MotDePasse","title":"Format de sortie"},{"location":"features/encrypt/#exemples","text":"","title":"Exemples"},{"location":"features/get/","tags":"dsplus,documentation","text":"Get Obtenir des informations sur ou exporter un objet. Syntaxe dsplus get --AssetType NomObjet [--options] Options Les types d'objets (AssetType) possibles: job routine container tabledef paramset stage dataconnection Les options possibles: metadata : extraire les m\u00e9tadonn\u00e9es techniques de l'objet info : les m\u00e9tadonn\u00e9es \u00e0 extraire code : code source image : capture d'\u00e9cran export : export isx ast : repr\u00e9sentation json du job doc : documentation markdown de l'objet checksum: hash de l'objet run : informations sur la derni\u00e8re \u00e9xecution du job (n\u00e9cessite que l'operation console soit active) output : \u00e9crire les informations extraites dans des fichiers target : racine de la cible pour les fichiers git : indexe l'objet verbose: affiche les informations extraites dans la sortie standard L'option info s'applique \u00e0 l'option metadata et peut prendre les valeurs: category name type jobType RID modificationTimestamp modifiedByUser creationTimestamp createdByUser isSystem shortDescription project server all \u00e9quivaut \u00e0 toutes les valeur pr\u00e9c\u00e9dentes Info En cas d'\u00e9criture de ces informations en fichier plats, ceux-ci sont plac\u00e9s dans la cible sous l'arborescence category/name/name.extension . Par d\u00e9faut la racine de la cible est le r\u00e9pertoire courant ou la racine du repository git si on se trouve dans un repository git. On peut d\u00e9finir la cible avec l'option target . Le format de l'arborescence peut \u00eatre d\u00e9fini par la variable d'environnement DSP_TARGETFORMAT . Par exemple si on veut ajouter la notion de projet: [project]/[category]/[name]/[name] . Les param\u00e8tres possibles sont: name category server project type (job/routine...) ext (pjb/sjb...) Y: Ann\u00e9e de derni\u00e8re modification M: Mois de derni\u00e8re modification D: Jour de derni\u00e8re modification H: Heure de derni\u00e8re modification m: Minute de derni\u00e8re modification Format de sortie La commande est silencieuse \u00e0 moins d'activer l'option --verbose . Dans ce cas le format d\u00e9pend des informations produites et sera multi-format: metadata : json code : xml/texte ast : json doc : markdown checksum: texte run : json Exemples","title":"get"},{"location":"features/get/#get","text":"Obtenir des informations sur ou exporter un objet.","title":"Get"},{"location":"features/get/#syntaxe","text":"dsplus get --AssetType NomObjet [--options]","title":"Syntaxe"},{"location":"features/get/#options","text":"Les types d'objets (AssetType) possibles: job routine container tabledef paramset stage dataconnection Les options possibles: metadata : extraire les m\u00e9tadonn\u00e9es techniques de l'objet info : les m\u00e9tadonn\u00e9es \u00e0 extraire code : code source image : capture d'\u00e9cran export : export isx ast : repr\u00e9sentation json du job doc : documentation markdown de l'objet checksum: hash de l'objet run : informations sur la derni\u00e8re \u00e9xecution du job (n\u00e9cessite que l'operation console soit active) output : \u00e9crire les informations extraites dans des fichiers target : racine de la cible pour les fichiers git : indexe l'objet verbose: affiche les informations extraites dans la sortie standard L'option info s'applique \u00e0 l'option metadata et peut prendre les valeurs: category name type jobType RID modificationTimestamp modifiedByUser creationTimestamp createdByUser isSystem shortDescription project server all \u00e9quivaut \u00e0 toutes les valeur pr\u00e9c\u00e9dentes Info En cas d'\u00e9criture de ces informations en fichier plats, ceux-ci sont plac\u00e9s dans la cible sous l'arborescence category/name/name.extension . Par d\u00e9faut la racine de la cible est le r\u00e9pertoire courant ou la racine du repository git si on se trouve dans un repository git. On peut d\u00e9finir la cible avec l'option target . Le format de l'arborescence peut \u00eatre d\u00e9fini par la variable d'environnement DSP_TARGETFORMAT . Par exemple si on veut ajouter la notion de projet: [project]/[category]/[name]/[name] . Les param\u00e8tres possibles sont: name category server project type (job/routine...) ext (pjb/sjb...) Y: Ann\u00e9e de derni\u00e8re modification M: Mois de derni\u00e8re modification D: Jour de derni\u00e8re modification H: Heure de derni\u00e8re modification m: Minute de derni\u00e8re modification","title":"Options"},{"location":"features/get/#format-de-sortie","text":"La commande est silencieuse \u00e0 moins d'activer l'option --verbose . Dans ce cas le format d\u00e9pend des informations produites et sera multi-format: metadata : json code : xml/texte ast : json doc : markdown checksum: texte run : json","title":"Format de sortie"},{"location":"features/get/#exemples","text":"","title":"Exemples"},{"location":"features/init/","tags":"dsplus,documentation","text":"Init Initialise ou met \u00e0 jour un repository local en batch. Syntaxe dsplus init [--update] Cette commande fonctionne de mani\u00e8re identique \u00e0 ce que ferait la commande get appliqu\u00e9e en boucle \u00e0 ce qui est retourn\u00e9 par la commande list Les options possibles sont donc les combinaisons des options de ces 2 commandes. L'option update permet d'appliquer la commande uniquement sur les objets modifi\u00e9s vis-\u00e0-vis de l'index. Cet index est actualis\u00e9 lorsque la commande init ou get est utilis\u00e9e avec l'option git . Format de sortie La sortie est au format mixte multi-json , informationnel et batch suivant les options choisies. Les sorties informationnelles peuvent \u00eatre rendues silencieux avec l'option silent/DSP_SILENT activ\u00e9e. Exemples","title":"init"},{"location":"features/init/#init","text":"Initialise ou met \u00e0 jour un repository local en batch.","title":"Init"},{"location":"features/init/#syntaxe","text":"dsplus init [--update] Cette commande fonctionne de mani\u00e8re identique \u00e0 ce que ferait la commande get appliqu\u00e9e en boucle \u00e0 ce qui est retourn\u00e9 par la commande list Les options possibles sont donc les combinaisons des options de ces 2 commandes. L'option update permet d'appliquer la commande uniquement sur les objets modifi\u00e9s vis-\u00e0-vis de l'index. Cet index est actualis\u00e9 lorsque la commande init ou get est utilis\u00e9e avec l'option git .","title":"Syntaxe"},{"location":"features/init/#format-de-sortie","text":"La sortie est au format mixte multi-json , informationnel et batch suivant les options choisies. Les sorties informationnelles peuvent \u00eatre rendues silencieux avec l'option silent/DSP_SILENT activ\u00e9e.","title":"Format de sortie"},{"location":"features/init/#exemples","text":"","title":"Exemples"},{"location":"features/list/","tags":"dsplus,documentation","text":"List Liste les objets d'un projet Syntaxe dsplus list [--AssetType] [--filter] [--info] Info Pr\u00e9requis: les param\u00e8tres suivant doivent \u00eatre pr\u00e9d\u00e9finis dans le fichier de configuration (ou ajout\u00e9s en arguments \u00e0 la ligne de commande): domain server username password Options Les types d'objets (AssetType) possibles (choix multiple): job routine container tabledef paramset stage dataconnection Les options possibles: info : information \u00e0 r\u00e9cup\u00e9rer filter : filtre sql \u00e0 appliquer L'option info peut prendre les valeurs: category name type jobType RID modificationTimestamp modifiedByUser creationTimestamp createdByUser isSystem shortDescription all \u00e9quivaut \u00e0 toutes les valeur pr\u00e9c\u00e9dentes Format de sortie La sortie est au format json . Exemples dsplus list --project dstage1 [ { ca te gory : '/T_NR' , na me : 'Js_NR' , jobType : ' 2 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 1 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 1 x' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 2 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 3 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 4 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR/archives' , na me : 'Jx_NR_Lvl 2 _old' , jobType : ' 3 ' }, { ca te gory : '/T_NR/jobs' , na me : 'Jx_NR_ 00 _Ge t Keys' , jobType : ' 3 ' }, { ca te gory : '/T_NR/jobs' , na me : 'Jx_NR_Lvl 1 _ 0 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR/params' , na me : 'Ps_NR_Db' , jobType : u n de f i ne d }, { ca te gory : '/T_NR/rou t i nes ' , na me : 'R t T nr Ge t Keys' , jobType : ' 0 ' }, { ca te gory : '/T_NR/rou t i nes ' , na me : 'R t T nr Se t Key' , jobType : ' 0 ' }, { ca te gory : '/T_NR/s ta ges' , na me : 'S t T nr RdS tats ' , jobType : ' 3 ' }, { ca te gory : '/T_NR/s ta ges' , na me : 'S t T nr WrS tats ' , jobType : ' 3 ' } ] dsplus list --paramset [ { ca te gory : '/T_NR/params' , na me : 'Ps_NR_Db' , jobType : u n de f i ne d } ] dsplus list --paramset --info all [ { ca te gory : '/T_NR/params' , na me : 'Ps_NR_Db' , RID : 'c 2e76 d 84.19e8228.001 n 30 kgk. 0 vrelio. f 12 j 2 b.r 29 il f g ne v 3 qkhc f j 8 a t g f ' , modi f ica t io n Times ta mp : ' 2021 / 01 / 15 09 : 58 : 19 ' , modi f iedByUser : 'isadmi n ' , crea t io n Times ta mp : ' 2020 / 04 / 16 10 : 37 : 28 ' , crea te dByUser : 'isadmi n ' , isSys te m : ' false ' , shor t Descrip t io n : 'Da ta base parame ters ' , t ype : 'paramse t ' } ] dsplus list --job --info type jobType [ { t ype : 'job' , jobType : ' 2 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' } ] dsplus list --job --info name --filter \"jobType='2'\" [ { na me : 'Js_NR' } ] dsplus list --info type jobType --query 'select type,jobType,count(*) as nb from ? group by type,jobType' --format table \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 (index) \u2502 type \u2502 jobType \u2502 nb \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 'job' \u2502 '2' \u2502 1 \u2502 \u2502 1 \u2502 'job' \u2502 '3' \u2502 8 \u2502 \u2502 2 \u2502 'paramset' \u2502 undefined \u2502 1 \u2502 \u2502 3 \u2502 'routine' \u2502 '0' \u2502 2 \u2502 \u2502 4 \u2502 'stage' \u2502 '3' \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518","title":"list"},{"location":"features/list/#list","text":"Liste les objets d'un projet","title":"List"},{"location":"features/list/#syntaxe","text":"dsplus list [--AssetType] [--filter] [--info] Info Pr\u00e9requis: les param\u00e8tres suivant doivent \u00eatre pr\u00e9d\u00e9finis dans le fichier de configuration (ou ajout\u00e9s en arguments \u00e0 la ligne de commande): domain server username password","title":"Syntaxe"},{"location":"features/list/#options","text":"Les types d'objets (AssetType) possibles (choix multiple): job routine container tabledef paramset stage dataconnection Les options possibles: info : information \u00e0 r\u00e9cup\u00e9rer filter : filtre sql \u00e0 appliquer L'option info peut prendre les valeurs: category name type jobType RID modificationTimestamp modifiedByUser creationTimestamp createdByUser isSystem shortDescription all \u00e9quivaut \u00e0 toutes les valeur pr\u00e9c\u00e9dentes","title":"Options"},{"location":"features/list/#format-de-sortie","text":"La sortie est au format json .","title":"Format de sortie"},{"location":"features/list/#exemples","text":"dsplus list --project dstage1 [ { ca te gory : '/T_NR' , na me : 'Js_NR' , jobType : ' 2 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 1 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 1 x' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 2 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 3 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR' , na me : 'Jx_NR_Lvl 4 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR/archives' , na me : 'Jx_NR_Lvl 2 _old' , jobType : ' 3 ' }, { ca te gory : '/T_NR/jobs' , na me : 'Jx_NR_ 00 _Ge t Keys' , jobType : ' 3 ' }, { ca te gory : '/T_NR/jobs' , na me : 'Jx_NR_Lvl 1 _ 0 ' , jobType : ' 3 ' }, { ca te gory : '/T_NR/params' , na me : 'Ps_NR_Db' , jobType : u n de f i ne d }, { ca te gory : '/T_NR/rou t i nes ' , na me : 'R t T nr Ge t Keys' , jobType : ' 0 ' }, { ca te gory : '/T_NR/rou t i nes ' , na me : 'R t T nr Se t Key' , jobType : ' 0 ' }, { ca te gory : '/T_NR/s ta ges' , na me : 'S t T nr RdS tats ' , jobType : ' 3 ' }, { ca te gory : '/T_NR/s ta ges' , na me : 'S t T nr WrS tats ' , jobType : ' 3 ' } ] dsplus list --paramset [ { ca te gory : '/T_NR/params' , na me : 'Ps_NR_Db' , jobType : u n de f i ne d } ] dsplus list --paramset --info all [ { ca te gory : '/T_NR/params' , na me : 'Ps_NR_Db' , RID : 'c 2e76 d 84.19e8228.001 n 30 kgk. 0 vrelio. f 12 j 2 b.r 29 il f g ne v 3 qkhc f j 8 a t g f ' , modi f ica t io n Times ta mp : ' 2021 / 01 / 15 09 : 58 : 19 ' , modi f iedByUser : 'isadmi n ' , crea t io n Times ta mp : ' 2020 / 04 / 16 10 : 37 : 28 ' , crea te dByUser : 'isadmi n ' , isSys te m : ' false ' , shor t Descrip t io n : 'Da ta base parame ters ' , t ype : 'paramse t ' } ] dsplus list --job --info type jobType [ { t ype : 'job' , jobType : ' 2 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' }, { t ype : 'job' , jobType : ' 3 ' } ] dsplus list --job --info name --filter \"jobType='2'\" [ { na me : 'Js_NR' } ] dsplus list --info type jobType --query 'select type,jobType,count(*) as nb from ? group by type,jobType' --format table \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2510 \u2502 (index) \u2502 type \u2502 jobType \u2502 nb \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2524 \u2502 0 \u2502 'job' \u2502 '2' \u2502 1 \u2502 \u2502 1 \u2502 'job' \u2502 '3' \u2502 8 \u2502 \u2502 2 \u2502 'paramset' \u2502 undefined \u2502 1 \u2502 \u2502 3 \u2502 'routine' \u2502 '0' \u2502 2 \u2502 \u2502 4 \u2502 'stage' \u2502 '3' \u2502 2 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518","title":"Exemples"},{"location":"features/manifest/","tags":"dsplus,documentation","text":"Manifest Affiche le manifeste d'un package. Syntaxe dsplus manifest --pack Package.isx Format de sortie La sortie est au format json et contient l'int\u00e9gralit\u00e9 du manifeste: infos: Information sur le package (mode, date, r\u00e9vision git, remote, version...) checksum: checksums des objets datastage metadata: m\u00e9tadonn\u00e9es des objets datastage ds: liste des objets datastage configuration: configuration projet externals: lists des objets externes Exemples","title":"manifest"},{"location":"features/manifest/#manifest","text":"Affiche le manifeste d'un package.","title":"Manifest"},{"location":"features/manifest/#syntaxe","text":"dsplus manifest --pack Package.isx","title":"Syntaxe"},{"location":"features/manifest/#format-de-sortie","text":"La sortie est au format json et contient l'int\u00e9gralit\u00e9 du manifeste: infos: Information sur le package (mode, date, r\u00e9vision git, remote, version...) checksum: checksums des objets datastage metadata: m\u00e9tadonn\u00e9es des objets datastage ds: liste des objets datastage configuration: configuration projet externals: lists des objets externes","title":"Format de sortie"},{"location":"features/manifest/#exemples","text":"","title":"Exemples"},{"location":"features/package/","tags":"dsplus,documentation","text":"Package Packager un ensemble d'objets depuis un dossier ou un repository. Syntaxe dsplus package --mode DELTA|FULL --pack pack.isx [--git --version] Options mode : mode de packaging complet (FULL), ou uniquement les objets modifi\u00e9s entre 2 r\u00e9visions (DELTA) pack : nom du fichier produit (format isx) git : indique que le repository est du type git version: si mode FULL: r\u00e9vision git \u00e0 packager (commit, tag, branche) si mode DELTA: modifications entre 2 r\u00e9visions Objets externes Les fichiers (param\u00e9trages, scripts etc...) pr\u00e9sents dans le sous-dossier external du repository seront \u00e9galement packag\u00e9s. Info On peut sp\u00e9cifier un autre nom de sous-dossier via l'option extdir ou la variable d'environnement DSP_EXTDIR . Manifeste Un package produit avec dsplus contient \u00e9galement un manifeste d\u00e9crivant les informations ci-dessous: Informations du package: version revision git mode (FULL/DELTA) date de packaging repository git distant (si possible) Checksums des objets datastage Metadonn\u00e9es des objets datastage En mode FULL: liste des objets datastages liste des objets externes En mode DELTA: liste des objets datastages cr\u00e9\u00e9s liste des objets datastages modifi\u00e9s liste des objets datastages supprim\u00e9s liste des objets externes cr\u00e9\u00e9s liste des objets externes modifi\u00e9s liste des objets externes supprim\u00e9s La configuration projet si elle existe Le manifest est au format json et peut \u00eatre affich\u00e9 via la commande: dsplus manifest --pack Package.isx Format de sortie La sortie est la liste des objets packag\u00e9s au format json .","title":"package"},{"location":"features/package/#package","text":"Packager un ensemble d'objets depuis un dossier ou un repository.","title":"Package"},{"location":"features/package/#syntaxe","text":"dsplus package --mode DELTA|FULL --pack pack.isx [--git --version]","title":"Syntaxe"},{"location":"features/package/#options","text":"mode : mode de packaging complet (FULL), ou uniquement les objets modifi\u00e9s entre 2 r\u00e9visions (DELTA) pack : nom du fichier produit (format isx) git : indique que le repository est du type git version: si mode FULL: r\u00e9vision git \u00e0 packager (commit, tag, branche) si mode DELTA: modifications entre 2 r\u00e9visions","title":"Options"},{"location":"features/package/#objets-externes","text":"Les fichiers (param\u00e9trages, scripts etc...) pr\u00e9sents dans le sous-dossier external du repository seront \u00e9galement packag\u00e9s. Info On peut sp\u00e9cifier un autre nom de sous-dossier via l'option extdir ou la variable d'environnement DSP_EXTDIR .","title":"Objets externes"},{"location":"features/package/#manifeste","text":"Un package produit avec dsplus contient \u00e9galement un manifeste d\u00e9crivant les informations ci-dessous: Informations du package: version revision git mode (FULL/DELTA) date de packaging repository git distant (si possible) Checksums des objets datastage Metadonn\u00e9es des objets datastage En mode FULL: liste des objets datastages liste des objets externes En mode DELTA: liste des objets datastages cr\u00e9\u00e9s liste des objets datastages modifi\u00e9s liste des objets datastages supprim\u00e9s liste des objets externes cr\u00e9\u00e9s liste des objets externes modifi\u00e9s liste des objets externes supprim\u00e9s La configuration projet si elle existe Le manifest est au format json et peut \u00eatre affich\u00e9 via la commande: dsplus manifest --pack Package.isx","title":"Manifeste"},{"location":"features/package/#format-de-sortie","text":"La sortie est la liste des objets packag\u00e9s au format json .","title":"Format de sortie"},{"location":"features/projects/","tags":"dsplus,documentation","text":"Projects Produit la liste des projets. Syntaxe dsplus projects Info Pr\u00e9requis: les param\u00e8tres suivant doivent \u00eatre pr\u00e9d\u00e9finis dans le fichier de configuration (ou ajout\u00e9s en arguments \u00e0 la ligne de commande): domain username password Format de sortie La sortie est au format json Exemple dsplus projects [ { \"name\" : \"ANALYZERPROJECT\" , \"dsServerName\" : \"IS-EN-CONDUCTOR-0.EN-COND\" , \"portNumber\" : 31538 }, { \"name\" : \"dstage1\" , \"dsServerName\" : \"IS-EN-CONDUCTOR-0.EN-COND\" , \"portNumber\" : 31538 }, { \"name\" : \"dstage2\" , \"dsServerName\" : \"IS-EN-CONDUCTOR-0.EN-COND\" , \"portNumber\" : 31538 } ]","title":"projects"},{"location":"features/projects/#projects","text":"Produit la liste des projets.","title":"Projects"},{"location":"features/projects/#syntaxe","text":"dsplus projects Info Pr\u00e9requis: les param\u00e8tres suivant doivent \u00eatre pr\u00e9d\u00e9finis dans le fichier de configuration (ou ajout\u00e9s en arguments \u00e0 la ligne de commande): domain username password","title":"Syntaxe"},{"location":"features/projects/#format-de-sortie","text":"La sortie est au format json","title":"Format de sortie"},{"location":"features/projects/#exemple","text":"dsplus projects [ { \"name\" : \"ANALYZERPROJECT\" , \"dsServerName\" : \"IS-EN-CONDUCTOR-0.EN-COND\" , \"portNumber\" : 31538 }, { \"name\" : \"dstage1\" , \"dsServerName\" : \"IS-EN-CONDUCTOR-0.EN-COND\" , \"portNumber\" : 31538 }, { \"name\" : \"dstage2\" , \"dsServerName\" : \"IS-EN-CONDUCTOR-0.EN-COND\" , \"portNumber\" : 31538 } ]","title":"Exemple"},{"location":"features/properties/","tags":"dsplus,documentation","text":"Properties Produit les propri\u00e9t\u00e9s et les variables d'environnement du projet. Syntaxe dsplus properties --project Projet Format de sortie La sortie est au format json et contient les informations suivantes: properties: propri\u00e9t\u00e9s du projet environment: variables d'environnement du projet Exemples","title":"properties"},{"location":"features/properties/#properties","text":"Produit les propri\u00e9t\u00e9s et les variables d'environnement du projet.","title":"Properties"},{"location":"features/properties/#syntaxe","text":"dsplus properties --project Projet","title":"Syntaxe"},{"location":"features/properties/#format-de-sortie","text":"La sortie est au format json et contient les informations suivantes: properties: propri\u00e9t\u00e9s du projet environment: variables d'environnement du projet","title":"Format de sortie"},{"location":"features/properties/#exemples","text":"","title":"Exemples"},{"location":"features/publish/","tags":"dsplus,documentation","text":"Publish Publie un package sur un gestionnaire d'artefacts (Artifactory, Nexus...). Syntaxe dsplus publish --pack Package.isx Configuration Il est n\u00e9cessaire de configurer le ou les gestionnaires en fonction de leur api: registry: d\u00e9finition du nom du gestionnaire par d\u00e9faut dependencies: registry : nom du gestionnaire uri: Endpoint de l'api ou de la racinne de d\u00e9p\u00f4t path: emplacement des packages options: options pour l'api (authentification etc...) Les options uri et path acceptent des placeholders au format [[parametre]] . Format de sortie La sortie est de type texte. Exemples","title":"publish"},{"location":"features/publish/#publish","text":"Publie un package sur un gestionnaire d'artefacts (Artifactory, Nexus...).","title":"Publish"},{"location":"features/publish/#syntaxe","text":"dsplus publish --pack Package.isx","title":"Syntaxe"},{"location":"features/publish/#configuration","text":"Il est n\u00e9cessaire de configurer le ou les gestionnaires en fonction de leur api: registry: d\u00e9finition du nom du gestionnaire par d\u00e9faut dependencies: registry : nom du gestionnaire uri: Endpoint de l'api ou de la racinne de d\u00e9p\u00f4t path: emplacement des packages options: options pour l'api (authentification etc...) Les options uri et path acceptent des placeholders au format [[parametre]] .","title":"Configuration"},{"location":"features/publish/#format-de-sortie","text":"La sortie est de type texte.","title":"Format de sortie"},{"location":"features/publish/#exemples","text":"","title":"Exemples"},{"location":"features/quality/","tags":"dsplus,documentation","text":"Quality V\u00e9rifie le respect des normes et bonnes pratiques des objets d'un projet. Des r\u00e8gles standards sont pr\u00e9cod\u00e9es et seront appliqu\u00e9es par d\u00e9faut. Il est possible de d\u00e9finir des r\u00e9gles ou de modifier les r\u00e8gles standards. Produit les informations suivantes: rule: nom de la r\u00e8gle expected: r\u00e9sultat attendu pass: r\u00e9ussite du test (peut \u00eatre un bool\u00e9en ou une liste d'objets) fail: \u00e9chec du test (peut \u00eatre un bool\u00e9en ou une liste d'objets) categories: categories de la r\u00e8gle (bug, performance, maintenabilit\u00e9, bonnes pratiques etc...) severity: s\u00e9v\u00e9rit\u00e9 du test (information, mineure, majeure, critique) message: message informatif name: nom de l'objet test\u00e9 category: cat\u00e9gorie de l'objet test\u00e9 criticity: niveau de criticit\u00e9 Syntaxe Dynamique Pour analayser directement le projet: dsplus quality --project Projet [options] La commande et les options sont similiaires \u00e0 la commande list Statique Pour analyser des objets extraits dans un repository, pour une utilisation dans une cha\u00eene CI/CD sans d\u00e9pendances avec une infrastructure DataStage. dsplus quality --external Category/Job Supporte le globbing, par exemple pour analyser tout le repository: dsplus quality --external \"**\" dsplus quality --external \"Category/**\" Info ** pour une traverse recursive * pour tous les objets du r\u00e9pertoire Warning Pour que ces analyses statiques fonctionnent correctement il est n\u00e9cessaire que le repository continnent les m\u00e9tadonn\u00e9es, la repr\u00e9sentation syntaxique et les informations de derni\u00e8re executions des objets. Soit lors d'un dsplus get ou dsplus init les options: --metadata --info name type jobType --ast --run --output Format de sortie La sortie par d\u00e9faut est au format json . Formateurs additionnels html: l'option --html produit un rapport html Code Climate: l'option codecliamte/DSP_CODECLIMATE produit la sortie suivant le standard Code Climate (peut \u00eatre combin\u00e9 avec le format html) Exemples","title":"quality"},{"location":"features/quality/#quality","text":"V\u00e9rifie le respect des normes et bonnes pratiques des objets d'un projet. Des r\u00e8gles standards sont pr\u00e9cod\u00e9es et seront appliqu\u00e9es par d\u00e9faut. Il est possible de d\u00e9finir des r\u00e9gles ou de modifier les r\u00e8gles standards. Produit les informations suivantes: rule: nom de la r\u00e8gle expected: r\u00e9sultat attendu pass: r\u00e9ussite du test (peut \u00eatre un bool\u00e9en ou une liste d'objets) fail: \u00e9chec du test (peut \u00eatre un bool\u00e9en ou une liste d'objets) categories: categories de la r\u00e8gle (bug, performance, maintenabilit\u00e9, bonnes pratiques etc...) severity: s\u00e9v\u00e9rit\u00e9 du test (information, mineure, majeure, critique) message: message informatif name: nom de l'objet test\u00e9 category: cat\u00e9gorie de l'objet test\u00e9 criticity: niveau de criticit\u00e9","title":"Quality"},{"location":"features/quality/#syntaxe","text":"","title":"Syntaxe"},{"location":"features/quality/#dynamique","text":"Pour analayser directement le projet: dsplus quality --project Projet [options] La commande et les options sont similiaires \u00e0 la commande list","title":"Dynamique"},{"location":"features/quality/#statique","text":"Pour analyser des objets extraits dans un repository, pour une utilisation dans une cha\u00eene CI/CD sans d\u00e9pendances avec une infrastructure DataStage. dsplus quality --external Category/Job Supporte le globbing, par exemple pour analyser tout le repository: dsplus quality --external \"**\" dsplus quality --external \"Category/**\" Info ** pour une traverse recursive * pour tous les objets du r\u00e9pertoire Warning Pour que ces analyses statiques fonctionnent correctement il est n\u00e9cessaire que le repository continnent les m\u00e9tadonn\u00e9es, la repr\u00e9sentation syntaxique et les informations de derni\u00e8re executions des objets. Soit lors d'un dsplus get ou dsplus init les options: --metadata --info name type jobType --ast --run --output","title":"Statique"},{"location":"features/quality/#format-de-sortie","text":"La sortie par d\u00e9faut est au format json .","title":"Format de sortie"},{"location":"features/quality/#formateurs-additionnels","text":"html: l'option --html produit un rapport html Code Climate: l'option codecliamte/DSP_CODECLIMATE produit la sortie suivant le standard Code Climate (peut \u00eatre combin\u00e9 avec le format html)","title":"Formateurs additionnels"},{"location":"features/quality/#exemples","text":"","title":"Exemples"},{"location":"features/status/","tags":"dsplus,documentation","text":"Status Compare l'\u00e9tat d'un projet avec un index \u00e0 la racine d'un repository ou dans le r\u00e9pertoire courant. Produit le m\u00eame type de sortie que la commande list mais avec une coloration: vert: objets ajout\u00e9s dans le projet bleue: objets modifi\u00e9s rouge: objets supprim\u00e9s dans le projet Info L'index est un fichier nomm\u00e9 index.json celui-ci est produit ou mis-\u00e0-jour lorsque l'option --git est active avec les commandes dsplus init ou dsplus get . Syntaxe dsplus status --project Projet Format de sortie La sortie est au format mixte multi-json et informationnel. Exemples","title":"status"},{"location":"features/status/#status","text":"Compare l'\u00e9tat d'un projet avec un index \u00e0 la racine d'un repository ou dans le r\u00e9pertoire courant. Produit le m\u00eame type de sortie que la commande list mais avec une coloration: vert: objets ajout\u00e9s dans le projet bleue: objets modifi\u00e9s rouge: objets supprim\u00e9s dans le projet Info L'index est un fichier nomm\u00e9 index.json celui-ci est produit ou mis-\u00e0-jour lorsque l'option --git est active avec les commandes dsplus init ou dsplus get .","title":"Status"},{"location":"features/status/#syntaxe","text":"dsplus status --project Projet","title":"Syntaxe"},{"location":"features/status/#format-de-sortie","text":"La sortie est au format mixte multi-json et informationnel.","title":"Format de sortie"},{"location":"features/status/#exemples","text":"","title":"Exemples"},{"location":"tutos/customization/automatePlugins/","tags":"dsplus,howtos","text":"Automatisation Les raccourcis et l'int\u00e9gration au designer permettent d'industrialiser et simplifier certaines parties du worflow. Mais pour l'instant il ne s'agit que aspects li\u00e9s \u00e0 DataStage, les op\u00e9rations git restent \u00e0 effectuer, il y a plusieurs mani\u00e8res pour cela: Lignes de commandes git classiques Clients git graphique Cela restant des op\u00e9rations essentiellement manuelles, nous allons voir comment il est possible de les d\u00e9clencher automatiquement avec les plugins dsplus. Plugins dsplus Comme pour les raccourcis, on d\u00e9finit les plugins dans le fichier de configuration. Ici on veut d\u00e9clencher automatiquement tout ou une partie de l'enchainement suivant: git status git add .../job git commit -m \"commentaire\" git push Les plugins dsplus peuvent \u00eatre de 2 types: javascript commandes arbitraires D\u00e9claration Ce tutorial d\u00e9crit la mise en place d'une commande arbitraire. Pour d\u00e9clarer un plugin on doit d\u00e9finir: son type: ici, bin le programme/commande les arguments: un tableau d'arguments qui seront pass\u00e9s \u00e0 la commande. Ceux ci sont templatables. l'evenement d\u00e9clencheur du plugin: ici la fin de la commande get se traduire donc par \"end:get\" le contexte dans lequel le plugin se d\u00e9clenchera: ici lors de l'appel \u00e0 la commande get, pour simplifier et \u00e9viter le d\u00e9clenchment itempestif on choisi de lier la plugin au raccourcis cr\u00e9\u00e9e pr\u00e9c\u00e9demment en ajoutant une option au contexte. Pour le programme pour des raisons de facilit\u00e9 et portabilit\u00e9 on choisi de lancer la commande bash, les arguments sont le contenu du script qu'on souhaite lancer. La d\u00e9claration ci-dessous fera qu'apr\u00e8s avoir lanc\u00e9 la commande (en ligne de commande ou via le designer): dsplus git --job ... L'enchainement suivant se faira automatiquement: on se place dans le d\u00e9p\u00f4t, v\u00e9rification du statut, ajout des \u00e9l\u00e9ments du job v\u00e9rification du statut, commit, avec comme commentaire la 1\u00e8re ligne de la description longue attente (pour \u00e9viter la fermeture de la fen\u00eatre si appel depuis le designer) plugins : autogit : type : bin program : bash args : [ '-c' , 'cd \"${options.target}\" && git status \"$(dirname \"${file}\")\" && git add \"$(dirname \"${file}\")\" index.json && git status && git commit -m \"dsplus: $(echo \"${assetmetadata.longDescription}\" | head -1)\" && read ' ] event : \"end:get\" context : get : autogit : true shortcuts : git : get : ast : true metadata : true image : true export : true doc : true git : true output : true autogit : true Info Git permet \u00e9galement des raccourcis (alias), son extension (custom subcommands), ou de l'automatisation (git hooks). Ces fonctionalit\u00e9s peuvent \u00eatre utilis\u00e9es telles-quelles ou combin\u00e9es avec dsplus.","title":"Automatisation"},{"location":"tutos/customization/automatePlugins/#automatisation","text":"Les raccourcis et l'int\u00e9gration au designer permettent d'industrialiser et simplifier certaines parties du worflow. Mais pour l'instant il ne s'agit que aspects li\u00e9s \u00e0 DataStage, les op\u00e9rations git restent \u00e0 effectuer, il y a plusieurs mani\u00e8res pour cela: Lignes de commandes git classiques Clients git graphique Cela restant des op\u00e9rations essentiellement manuelles, nous allons voir comment il est possible de les d\u00e9clencher automatiquement avec les plugins dsplus.","title":"Automatisation"},{"location":"tutos/customization/automatePlugins/#plugins-dsplus","text":"Comme pour les raccourcis, on d\u00e9finit les plugins dans le fichier de configuration. Ici on veut d\u00e9clencher automatiquement tout ou une partie de l'enchainement suivant: git status git add .../job git commit -m \"commentaire\" git push Les plugins dsplus peuvent \u00eatre de 2 types: javascript commandes arbitraires","title":"Plugins dsplus"},{"location":"tutos/customization/automatePlugins/#declaration","text":"Ce tutorial d\u00e9crit la mise en place d'une commande arbitraire. Pour d\u00e9clarer un plugin on doit d\u00e9finir: son type: ici, bin le programme/commande les arguments: un tableau d'arguments qui seront pass\u00e9s \u00e0 la commande. Ceux ci sont templatables. l'evenement d\u00e9clencheur du plugin: ici la fin de la commande get se traduire donc par \"end:get\" le contexte dans lequel le plugin se d\u00e9clenchera: ici lors de l'appel \u00e0 la commande get, pour simplifier et \u00e9viter le d\u00e9clenchment itempestif on choisi de lier la plugin au raccourcis cr\u00e9\u00e9e pr\u00e9c\u00e9demment en ajoutant une option au contexte. Pour le programme pour des raisons de facilit\u00e9 et portabilit\u00e9 on choisi de lancer la commande bash, les arguments sont le contenu du script qu'on souhaite lancer. La d\u00e9claration ci-dessous fera qu'apr\u00e8s avoir lanc\u00e9 la commande (en ligne de commande ou via le designer): dsplus git --job ... L'enchainement suivant se faira automatiquement: on se place dans le d\u00e9p\u00f4t, v\u00e9rification du statut, ajout des \u00e9l\u00e9ments du job v\u00e9rification du statut, commit, avec comme commentaire la 1\u00e8re ligne de la description longue attente (pour \u00e9viter la fermeture de la fen\u00eatre si appel depuis le designer) plugins : autogit : type : bin program : bash args : [ '-c' , 'cd \"${options.target}\" && git status \"$(dirname \"${file}\")\" && git add \"$(dirname \"${file}\")\" index.json && git status && git commit -m \"dsplus: $(echo \"${assetmetadata.longDescription}\" | head -1)\" && read ' ] event : \"end:get\" context : get : autogit : true shortcuts : git : get : ast : true metadata : true image : true export : true doc : true git : true output : true autogit : true Info Git permet \u00e9galement des raccourcis (alias), son extension (custom subcommands), ou de l'automatisation (git hooks). Ces fonctionalit\u00e9s peuvent \u00eatre utilis\u00e9es telles-quelles ou combin\u00e9es avec dsplus.","title":"D\u00e9claration"},{"location":"tutos/customization/designerIntegration/","tags":"dsplus,howtos","text":"Int\u00e9gration avec le Designer Raccourcis Pour gagner du temps, on peut cr\u00e9er des raccourcis qui simplifieront le workflow. Editer le fichier dsplus.yml cr\u00e9\u00e9 pr\u00e9c\u00e9demment et ajouter les lignes ci-dessous: shortcuts : git : get : ast : true metadata : true image : true export : true doc : true git : true output : true On d\u00e9duira la syntaxe de la d\u00e9finition des raccourcis: nom raccourci : sous-commande d'origine : option : valeur Cela aura pour effet de cr\u00e9er une sous-commande git pour dsplus dont l'appel dsplus git est \u00e9quivalent \u00e0 dsplus get --export --metadata --output --image --ast --doc Ainsi lorsqu'on se trouve dans le dossier du d\u00e9p\u00f4t git, au lieu de: dsplus get -xmoi --ast --doc --job job1 job2 On peut entrer: dsplus git --job job1 job2 Appel depuis le designer Il est possible de se passer de l'utilisation des lignes de commandes en ajoutant dsplus aux custom tools du designer DataStage. Cette fonctionnalit\u00e9 permet d'appeler des commandes arbitraires avec des param\u00e8tres contextuels tels que le nom du projet ou du job actuellement \u00e9dit\u00e9. Question Jusqu'\u00e0 maintenant les commandes ont \u00e9t\u00e9 appel\u00e9es depuis le d\u00e9p\u00f4t li\u00e9 au projet DataStage. Lors de l'appel depuis le designer on ne sait pas o\u00f9 se trouve le d\u00e9p\u00f4t, il faut donc sp\u00e9cifier ce chemin d'une mani\u00e8re o\u00f9 d'une autre. Plusieurs solutions \u00e0 cela. Environnements On introduit la notion d'environnement dans le fichier dsplus.yml . A l'origine, celle-ci est pr\u00e9vue pour pouvoir identifier plusieurs environnements (dev/test...). Ici on s'en sert pour d\u00e9clarer le chemin du d\u00e9p\u00f4t git li\u00e9 au projet: envs : demoProject : target : \"C:/.../CheminDepots/demoProject\" project : demoProject Ensuite on peut ajouter le custom tool au designer: Success Cette op\u00e9ration permet donc de lancer la commande n\u00e9cessaire dsplus lorsqu'un job est ouvert en passant par le menu: Tools->Custom->git Note On pourrait se passer de la notion d'environnement en s'appliquant \u00e0 bien standardiser les noms des d\u00e9p\u00f4ts et des projets. Cependant dans le cas o\u00f9 un projet serait li\u00e9 \u00e0 plusieurs d\u00e9p\u00f4ts, par exemple, si chaque grande cat\u00e9gorie racine a son propre d\u00e9p\u00f4t, la solution pr\u00e9c\u00e9dente ne marcherait pas. L'argument target Pour palier \u00e0 cela on peut, \u00e0 la place de d\u00e9finir des environnements utiliser la capacit\u00e9 interactive du Custom Tool en sp\u00e9cifiant les arguments de la commande de la fa\u00e7on suivante: git --project %ProjectName --job %JobName --target \"C:/.../CheminDepots/%AskArguments\" De cette mani\u00e8re lors de l'appel il est demand\u00e9 \u00e0 l'utilisateur de saisir le nom du d\u00e9p\u00f4t vers lequel extraire le job. Bien que plus souple cette m\u00e9thode poser le risque des erreurs de saisies. Templating La fa\u00e7on dont dsplus organise le d\u00e9pot est pilot\u00e9e par: l'argument target: racine du d\u00e9p\u00f4t l'argument targetformat: arborescence des objets Par d\u00e9fault la racine est le r\u00e9pertoire courant ou la racine du d\u00e9p\u00f4t s'il s'agit d'un d\u00e9p\u00f4t git. Par d\u00e9faut l'arborescence est la suivante: racine |Cat\u00e9gorie Racine DataStage |_Sous cat\u00e9gorie |_ ... |_Nom du job |_NomDuJob.extension Un m\u00e9canisme de templating permet de personnaliser cette organisation et accepte les arguments suivants: server : serveur d'origine project : projet d'origine category : categorie(s) name : nom type : type: job, routine, paramset... ext : extension: pjb (parallel job), qjb (sequence job) ... Y / M / D / H / m : Timestamp de modification Plus les arguments sp\u00e9ciaux sur la cat\u00e9gorie: categories.x : o\u00f9 x est le num\u00e9ro du dossier, permet de selectionner un dossier sp\u00e9cifique. categories.-x : o\u00f9 x est le nombre de dossiers \u00e0 ignorer, permet de s\u00e9lectionner les dossiers \u00e0 partir d'une profondeur arbitraire. Par d\u00e9faut l'argument targetformat est donc [category]/[name]/[name] . Enfin on peut donc lier l'emplacement d'un d\u00e9p\u00f4t \u00e0 la cat\u00e9gorie racine en sp\u00e9cifiant: target : \"C:/.../CheminDepots/[categories.0] Eventuellement, en ajoutant sp\u00e9cifiant le format de l'arborescence de sorte \u00e0 ignorer la cat\u00e9gorie racine, cela \u00e9vitera la r\u00e9p\u00e9tition: targetformat : \"[_category-1]/[name]/[name]\"","title":"Integr\u00e9tation Designer"},{"location":"tutos/customization/designerIntegration/#integration-avec-le-designer","text":"","title":"Int\u00e9gration avec le Designer"},{"location":"tutos/customization/designerIntegration/#raccourcis","text":"Pour gagner du temps, on peut cr\u00e9er des raccourcis qui simplifieront le workflow. Editer le fichier dsplus.yml cr\u00e9\u00e9 pr\u00e9c\u00e9demment et ajouter les lignes ci-dessous: shortcuts : git : get : ast : true metadata : true image : true export : true doc : true git : true output : true On d\u00e9duira la syntaxe de la d\u00e9finition des raccourcis: nom raccourci : sous-commande d'origine : option : valeur Cela aura pour effet de cr\u00e9er une sous-commande git pour dsplus dont l'appel dsplus git est \u00e9quivalent \u00e0 dsplus get --export --metadata --output --image --ast --doc Ainsi lorsqu'on se trouve dans le dossier du d\u00e9p\u00f4t git, au lieu de: dsplus get -xmoi --ast --doc --job job1 job2 On peut entrer: dsplus git --job job1 job2","title":"Raccourcis"},{"location":"tutos/customization/designerIntegration/#appel-depuis-le-designer","text":"Il est possible de se passer de l'utilisation des lignes de commandes en ajoutant dsplus aux custom tools du designer DataStage. Cette fonctionnalit\u00e9 permet d'appeler des commandes arbitraires avec des param\u00e8tres contextuels tels que le nom du projet ou du job actuellement \u00e9dit\u00e9. Question Jusqu'\u00e0 maintenant les commandes ont \u00e9t\u00e9 appel\u00e9es depuis le d\u00e9p\u00f4t li\u00e9 au projet DataStage. Lors de l'appel depuis le designer on ne sait pas o\u00f9 se trouve le d\u00e9p\u00f4t, il faut donc sp\u00e9cifier ce chemin d'une mani\u00e8re o\u00f9 d'une autre. Plusieurs solutions \u00e0 cela.","title":"Appel depuis le designer"},{"location":"tutos/customization/designerIntegration/#environnements","text":"On introduit la notion d'environnement dans le fichier dsplus.yml . A l'origine, celle-ci est pr\u00e9vue pour pouvoir identifier plusieurs environnements (dev/test...). Ici on s'en sert pour d\u00e9clarer le chemin du d\u00e9p\u00f4t git li\u00e9 au projet: envs : demoProject : target : \"C:/.../CheminDepots/demoProject\" project : demoProject Ensuite on peut ajouter le custom tool au designer: Success Cette op\u00e9ration permet donc de lancer la commande n\u00e9cessaire dsplus lorsqu'un job est ouvert en passant par le menu: Tools->Custom->git Note On pourrait se passer de la notion d'environnement en s'appliquant \u00e0 bien standardiser les noms des d\u00e9p\u00f4ts et des projets. Cependant dans le cas o\u00f9 un projet serait li\u00e9 \u00e0 plusieurs d\u00e9p\u00f4ts, par exemple, si chaque grande cat\u00e9gorie racine a son propre d\u00e9p\u00f4t, la solution pr\u00e9c\u00e9dente ne marcherait pas.","title":"Environnements"},{"location":"tutos/customization/designerIntegration/#largument-target","text":"Pour palier \u00e0 cela on peut, \u00e0 la place de d\u00e9finir des environnements utiliser la capacit\u00e9 interactive du Custom Tool en sp\u00e9cifiant les arguments de la commande de la fa\u00e7on suivante: git --project %ProjectName --job %JobName --target \"C:/.../CheminDepots/%AskArguments\" De cette mani\u00e8re lors de l'appel il est demand\u00e9 \u00e0 l'utilisateur de saisir le nom du d\u00e9p\u00f4t vers lequel extraire le job. Bien que plus souple cette m\u00e9thode poser le risque des erreurs de saisies.","title":"L'argument target"},{"location":"tutos/customization/designerIntegration/#templating","text":"La fa\u00e7on dont dsplus organise le d\u00e9pot est pilot\u00e9e par: l'argument target: racine du d\u00e9p\u00f4t l'argument targetformat: arborescence des objets Par d\u00e9fault la racine est le r\u00e9pertoire courant ou la racine du d\u00e9p\u00f4t s'il s'agit d'un d\u00e9p\u00f4t git. Par d\u00e9faut l'arborescence est la suivante: racine |Cat\u00e9gorie Racine DataStage |_Sous cat\u00e9gorie |_ ... |_Nom du job |_NomDuJob.extension Un m\u00e9canisme de templating permet de personnaliser cette organisation et accepte les arguments suivants: server : serveur d'origine project : projet d'origine category : categorie(s) name : nom type : type: job, routine, paramset... ext : extension: pjb (parallel job), qjb (sequence job) ... Y / M / D / H / m : Timestamp de modification Plus les arguments sp\u00e9ciaux sur la cat\u00e9gorie: categories.x : o\u00f9 x est le num\u00e9ro du dossier, permet de selectionner un dossier sp\u00e9cifique. categories.-x : o\u00f9 x est le nombre de dossiers \u00e0 ignorer, permet de s\u00e9lectionner les dossiers \u00e0 partir d'une profondeur arbitraire. Par d\u00e9faut l'argument targetformat est donc [category]/[name]/[name] . Enfin on peut donc lier l'emplacement d'un d\u00e9p\u00f4t \u00e0 la cat\u00e9gorie racine en sp\u00e9cifiant: target : \"C:/.../CheminDepots/[categories.0] Eventuellement, en ajoutant sp\u00e9cifiant le format de l'arborescence de sorte \u00e0 ignorer la cat\u00e9gorie racine, cela \u00e9vitera la r\u00e9p\u00e9tition: targetformat : \"[_category-1]/[name]/[name]\"","title":"Templating"},{"location":"tutos/customization/qualityReport/","tags":"dsplus,howtos","text":"Afficher le rapport qualit\u00e9 depuis le designer Nous avons vu comment int\u00e9grer et automatiser le versionnement depuis le client Designer. Nous pouvons suivre la m\u00eame logique pour g\u00e9n\u00e9rer le rapport qualit\u00e9 d'un job et l'ouvrir en un click depuis le Designer. Raccourcis On commence par d\u00e9finir le raccourci qui sera int\u00e9gr\u00e9 au Designer: qualityReport : quality : openReport : true format : html reportsPath : \"C:/Users/User/AppData/Local/Temp\" #codeclimate: true Note L'emplacement est arbitraire et est sp\u00e9cifi\u00e9 ici pour simplifier l'appel au plugin. Designer On ajoute comme pr\u00e9c\u00e9dement une commande au Custom Tools. La commande de g\u00e9n\u00e9ration de rapport qualit\u00e9 ne g\u00e9n\u00e9rant des informations que sur la sortie standard, il faut faire une redirections. Certaines commandes complexes n'\u00e9tant pas toujours support\u00e9es on contourne en appelant en r\u00e9alit\u00e9, le programme git-bash et en lui passant la commande en argument: Command: C:\\Program Files\\Git\\git-bash.exe Arguments: -c \"dsplus qualityReport --job %JobName --project %ProjectName > /tmp/%JobName.html\" Info Depuis git-bash /tmp est \u00e9quivalent \u00e0 C:/Users/User/AppData/Local/Temp A ce stade l\u00e0 lors de l'appel depuis le desginer un rapport est g\u00e9n\u00e9r\u00e9. On va mettre en place un plugin pour l'ouvrir automatiquement. Plugin openReport : type : bin program : explorer args : [ \"file:///${reportsPath}/${asset.job.0}.html\" ] event : \"finish:quality\" context : quality : openReport : true","title":"Afficher le rapport qualit\u00e9 depuis le designer"},{"location":"tutos/customization/qualityReport/#afficher-le-rapport-qualite-depuis-le-designer","text":"Nous avons vu comment int\u00e9grer et automatiser le versionnement depuis le client Designer. Nous pouvons suivre la m\u00eame logique pour g\u00e9n\u00e9rer le rapport qualit\u00e9 d'un job et l'ouvrir en un click depuis le Designer.","title":"Afficher le rapport qualit\u00e9 depuis le designer"},{"location":"tutos/customization/qualityReport/#raccourcis","text":"On commence par d\u00e9finir le raccourci qui sera int\u00e9gr\u00e9 au Designer: qualityReport : quality : openReport : true format : html reportsPath : \"C:/Users/User/AppData/Local/Temp\" #codeclimate: true Note L'emplacement est arbitraire et est sp\u00e9cifi\u00e9 ici pour simplifier l'appel au plugin.","title":"Raccourcis"},{"location":"tutos/customization/qualityReport/#designer","text":"On ajoute comme pr\u00e9c\u00e9dement une commande au Custom Tools. La commande de g\u00e9n\u00e9ration de rapport qualit\u00e9 ne g\u00e9n\u00e9rant des informations que sur la sortie standard, il faut faire une redirections. Certaines commandes complexes n'\u00e9tant pas toujours support\u00e9es on contourne en appelant en r\u00e9alit\u00e9, le programme git-bash et en lui passant la commande en argument: Command: C:\\Program Files\\Git\\git-bash.exe Arguments: -c \"dsplus qualityReport --job %JobName --project %ProjectName > /tmp/%JobName.html\" Info Depuis git-bash /tmp est \u00e9quivalent \u00e0 C:/Users/User/AppData/Local/Temp A ce stade l\u00e0 lors de l'appel depuis le desginer un rapport est g\u00e9n\u00e9r\u00e9. On va mettre en place un plugin pour l'ouvrir automatiquement.","title":"Designer"},{"location":"tutos/customization/qualityReport/#plugin","text":"openReport : type : bin program : explorer args : [ \"file:///${reportsPath}/${asset.job.0}.html\" ] event : \"finish:quality\" context : quality : openReport : true","title":"Plugin"}]}